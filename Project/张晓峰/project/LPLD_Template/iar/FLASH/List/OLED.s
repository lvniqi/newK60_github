///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM       17/Aug/2014  18:20:34
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\lib\LPLD\OLED.c
//    Command line =  
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\lib\LPLD\OLED.c" -D IAR -D
//        LPLD_K60 -lCN
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\FLASH\List\"
//        -lB
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\FLASH\List\"
//        -o
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\FLASH\Obj\"
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files\IAR
//        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\app\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\common\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\cpu\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\cpu\headers\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\adc16\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\enet\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\lptmr\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\mcg\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\pmc\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\rtc\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\uart\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\drivers\wdog\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\platforms\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\LPLD\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\LPLD\USB\"
//        -I
//        "C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\..\..\..\lib\iar_config_files\"
//        -Ol
//    List file    =  
//        C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\project\LPLD_Template\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN Dif
        EXTERN I
        EXTERN LPLD_FTM0_PWM_ChangeDuty
        EXTERN LPLD_GPIO_Get_b
        EXTERN LPLD_PIT_ClearIsr
        EXTERN LPLD_PIT_SetIsr
        EXTERN P
        EXTERN Reset_Flash
        EXTERN Time
        EXTERN Write_Flash
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_fadd
        EXTERN __aeabi_fdiv
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f
        EXTERN __aeabi_memcpy
        EXTERN d
        EXTERN p
        EXTERN pd_speed
        EXTERN pit_isr0
        EXTERN t
        EXTERN v
        EXTERN wan_speed
        EXTERN zhi_speed

        PUBLIC Button_flag
        PUBLIC Button_value
        PUBLIC F12x12
        PUBLIC F12x12_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC OLED_CLS
        PUBLIC OLED_Change_Perameter
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Disp_Paremeter
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P12x12Str
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P6x8Str1
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_Print1
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC OLED_WrDat1
        PUBLIC OLED_write_float
        PUBLIC OLED_writenum_1
        PUBLIC OLED_writenum_2
        PUBLIC OLED_writenum_3
        PUBLIC OLED_writenum_4
        PUBLIC OLED_writenum_6

// C:\Users\zxf\Desktop\8.16\7.17(CCD修改)\lib\LPLD\OLED.c
//    1 /********************************************
//    2 使用说明：
//    3 OLED电源使用3.3V时   
//    4 ----------------
//    5   G    电源地
//    6   3.3V 接3.3V电源
//    7   D0   PTB2  
//    8   D1   PTB4
//    9   RST  PTB6
//   10   DC   PTB8
//   11   CS   已接地，不用接
//   12 ----------------
//   13 *********************************************/
//   14 #include "OLED.h"
//   15 #define XLevelL		0x00
//   16 #define XLevelH		0x10
//   17 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   18 #define Max_Column	128
//   19 #define Max_Row		  64
//   20 #define	Brightness	0xCF 
//   21 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   22 uint16 Button_flag[4] = {0};
Button_flag:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   23 uint16 Button_value[4]= {0};
Button_value:
        DS8 8

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
`?<Constant "0">`:
        DATA
        DC8 "0"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0123456789">`:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "00">`:
        DATA
        DC8 "00"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0123456789">_1`:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "000">`:
        DATA
        DC8 "000"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0123456789">_2`:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0000">`:
        DATA
        DC8 "0000"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0123456789">_3`:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "000000">`:
        DATA
        DC8 "000000"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "0123456789">_4`:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "."

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "P:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "I:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "D:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "p:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "d:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "V:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "time:">`:
        DATA
        DC8 "time:"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "zhi:">`:
        DATA
        DC8 "zhi:"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "wan:">`:
        DATA
        DC8 "wan:"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "Podao:">`:
        DATA
        DC8 "Podao:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "Save to SD!">`:
        DATA
        DC8 "Save to SD!"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "Change">`:
        DATA
        DC8 "Change"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "      ">`:
        DATA
        DC8 "      "
        DC8 0
//   24 /*
//   25 4线SPI使用说明：
//   26 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   27 VCC 供内部逻辑电压 1.8~6V   
//   28 GND 地
//   29 
//   30 BS0 低电平
//   31 BS1 低电平
//   32 BS2 低电平
//   33 
//   34 CS  片选管脚
//   35 DC  命令数据选择管脚
//   36 RES 模块复位管脚 
//   37 D0（SCLK） ，时钟脚，由MCU控制
//   38 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   39 
//   40 D2 悬空      
//   41 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   42 RD  低电平 ，也可悬空，但最好设为低电平
//   43 RW  低电平 ，也可悬空，但最好设为低电平
//   44 RD  低电平 ，也可悬空，但最好设为低电平   
//   45 */
//   46 
//   47 #define X_WIDTH 128
//   48 #define Y_WIDTH 64
//   49 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   50 const byte F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   51 {
//   52     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   53     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   54     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   55     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   56     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   57     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   58     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   59     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   60     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   61     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   62     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   63     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   64     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   65     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   66     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   67     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   68     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   69     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   70     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   71     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   72     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   73     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   74     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   75     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   76     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   77     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   78     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   79     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   80     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   81     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   82     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   83     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   84     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   85     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   86     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   87     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   88     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   89     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   90     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   91     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   92     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   93     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   94     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   95     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   96     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   97     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   98     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//   99     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  100     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  101     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  102     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  103     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  104     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  105     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  106     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  107     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  108     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  109     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  110     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  111     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  112     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  113     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  114     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  115     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  116     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  117     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  118     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  119     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  120     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  121     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  122     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  123     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  124     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  125     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  126     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  127     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  128     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  129     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  130     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  131     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  132     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  133     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  134     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  135     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  136     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  137     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  138     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  139     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  140     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  141     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  142     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  143     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  144 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  145 const byte F12x12_Idx[] = 
F12x12_Idx:
        DATA
        DC8 "\312\322\316\302\266\310\260\264\274\374\264\316\265\347\321\271\324\264\326\265"
        DC8 0, 0, 0
//  146 {
//  147 	"室温度按键次电压源值"
//  148 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  149 const byte F12x12[] = {  
F12x12:
        DATA
        DC8 28, 4, 148, 212, 181, 150, 148, 212, 148, 4, 28, 0, 8, 10, 10, 10
        DC8 10, 15, 10, 10, 10, 10, 8, 0, 34, 68, 0, 192, 95, 213, 85, 213, 95
        DC8 192, 0, 0, 4, 2, 9, 15, 8, 15, 8, 15, 8, 15, 8, 0, 0, 254, 10, 138
        DC8 190, 170, 171, 170, 190, 138, 10, 0, 8, 7, 0, 8, 9, 10, 4, 4, 10, 9
        DC8 8, 0, 136, 136, 255, 72, 0, 76, 196, 117, 70, 196, 76, 0, 0, 8, 15
        DC8 0, 8, 8, 5, 2, 2, 5, 8, 0, 148, 243, 146, 100, 220, 136, 170, 255
        DC8 170, 190, 8, 0, 0, 15, 4, 10, 7, 10, 10, 15, 10, 10, 10, 0, 2, 4
        DC8 128, 32, 24, 135, 116, 132, 4, 20, 12, 0, 2, 1, 8, 4, 2, 1, 0, 1, 2
        DC8 4, 8, 0, 252, 36, 36, 36, 255, 36, 36, 36, 252, 0, 0, 0, 3, 1, 1, 1
        DC8 7, 9, 9, 9, 9, 8, 14, 0, 0, 254, 2, 66, 66, 66, 250, 66, 66, 66, 2
        DC8 0, 8, 7, 8, 8, 8, 8, 15, 8, 9, 10, 8, 0, 17, 34, 0, 255, 1, 249
        DC8 173, 171, 169, 249, 1, 0, 4, 2, 8, 7, 4, 2, 8, 15, 0, 2, 4, 0, 16
        DC8 252, 3, 0, 250, 170, 175, 170, 170, 250, 2, 0, 0, 15, 0, 8, 15, 10
        DC8 10, 10, 10, 15, 8, 0
//  150 0x1C,0x04,0x94,0xD4,0xB5,0x96,0x94,0xD4,0x94,0x04,0x1C,0x00,
//  151 0x08,0x0A,0x0A,0x0A,0x0A,0x0F,0x0A,0x0A,0x0A,0x0A,0x08,0x00,//室
//  152 
//  153 0x22,0x44,0x00,0xC0,0x5F,0xD5,0x55,0xD5,0x5F,0xC0,0x00,0x00,
//  154 0x04,0x02,0x09,0x0F,0x08,0x0F,0x08,0x0F,0x08,0x0F,0x08,0x00,//温
//  155 
//  156 0x00,0xFE,0x0A,0x8A,0xBE,0xAA,0xAB,0xAA,0xBE,0x8A,0x0A,0x00,
//  157 0x08,0x07,0x00,0x08,0x09,0x0A,0x04,0x04,0x0A,0x09,0x08,0x00,//度
//  158 
//  159 0x88,0x88,0xFF,0x48,0x00,0x4C,0xC4,0x75,0x46,0xC4,0x4C,0x00,
//  160 0x00,0x08,0x0F,0x00,0x08,0x08,0x05,0x02,0x02,0x05,0x08,0x00,//按
//  161 
//  162 0x94,0xF3,0x92,0x64,0xDC,0x88,0xAA,0xFF,0xAA,0xBE,0x08,0x00,
//  163 0x00,0x0F,0x04,0x0A,0x07,0x0A,0x0A,0x0F,0x0A,0x0A,0x0A,0x00,//键
//  164 
//  165 0x02,0x04,0x80,0x20,0x18,0x87,0x74,0x84,0x04,0x14,0x0C,0x00,
//  166 0x02,0x01,0x08,0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x08,0x00,//次
//  167 
//  168 0xFC,0x24,0x24,0x24,0xFF,0x24,0x24,0x24,0xFC,0x00,0x00,0x00,
//  169 0x03,0x01,0x01,0x01,0x07,0x09,0x09,0x09,0x09,0x08,0x0E,0x00,//电
//  170 
//  171 0x00,0xFE,0x02,0x42,0x42,0x42,0xFA,0x42,0x42,0x42,0x02,0x00,
//  172 0x08,0x07,0x08,0x08,0x08,0x08,0x0F,0x08,0x09,0x0A,0x08,0x00,//压
//  173 
//  174 0x11,0x22,0x00,0xFF,0x01,0xF9,0xAD,0xAB,0xA9,0xF9,0x01,0x00,
//  175 0x04,0x02,0x08,0x07,0x04,0x02,0x08,0x0F,0x00,0x02,0x04,0x00,//源
//  176 
//  177 0x10,0xFC,0x03,0x00,0xFA,0xAA,0xAF,0xAA,0xAA,0xFA,0x02,0x00,
//  178 0x00,0x0F,0x00,0x08,0x0F,0x0A,0x0A,0x0A,0x0A,0x0F,0x08,0x00,//值
//  179 
//  180 };
//  181 
//  182 //======================================================
//  183 // 128X64I液晶底层驱动[8X16]字体库
//  184 // 设计者: powerint
//  185 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  186 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  187 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  188 const byte F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  189 {
//  190 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  191   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  192   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  193   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  194   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  195   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  196   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  197   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  198   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  199   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  200   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  201   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  202   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  203   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  204   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  205   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  206   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  207   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  208   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  209   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  210   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  211   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  212   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  213   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  214   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  215   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  216   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  217   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  218   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  219   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  220   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  221   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  222   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  223   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  224   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  225   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  226   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  227   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  228   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  229   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  230   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  231   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  232   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  233   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  234   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  235   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  236   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  237   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  238   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  239   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  240   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  241   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  242   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  243   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  244   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  245   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  246   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  247   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  248   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  249   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  250   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  251   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  252   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  253   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  254   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  255   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  256   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  257   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  258   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  259   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  260   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  261   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  262   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  263   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  264   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  265   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  266   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  267   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  268   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  269   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  270   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  271   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  272   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  273   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  274   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  275   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  276   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  277   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  278   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  279   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  280   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  281   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  282   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  283   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  284   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  285 
//  286 };
//  287 //数据水平，字节垂直

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  288 void OLED_WrDat(byte data)
//  289 {
//  290   byte i=8;
OLED_WrDat:
        MOVS     R1,#+8
//  291   //LCD_CS=0;;
//  292   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x800000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  293   asm("nop"); 
        nop
//  294   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  295   asm("nop");    
        nop
        B.N      ??OLED_WrDat_0
//  296   while(i--)
//  297   {
//  298     if(data&0x80){GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
//  299     else{GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
??OLED_WrDat_1:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  300     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0)); 
??OLED_WrDat_2:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  301     asm("nop");;;;
        nop
//  302     //asm("nop");            
//  303     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  304     data<<=1;    
        LSLS     R0,R0,#+1
??OLED_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrDat_1
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat_2
//  305   }
//  306   //LCD_CS=1;
//  307 }
??OLED_WrDat_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  308 void OLED_WrDat1(byte data)
//  309 {
//  310   byte i=8;
OLED_WrDat1:
        MOVS     R1,#+8
//  311   //LCD_CS=0;;
//  312   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x800000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  313   asm("nop"); 
        nop
//  314   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  315   asm("nop");    
        nop
        B.N      ??OLED_WrDat1_0
//  316   while(i--)
//  317   {
//  318     if(data&0x80){GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
//  319     else{GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
??OLED_WrDat1_1:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  320     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0)); 
??OLED_WrDat1_2:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  321     asm("nop");;;;
        nop
//  322     //asm("nop");            
//  323     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  324     data<<=1;    
        LSLS     R0,R0,#+1
??OLED_WrDat1_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrDat1_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrDat1_1
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat1_2
//  325   }
//  326   //LCD_CS=1;
//  327 }
??OLED_WrDat1_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  328 void OLED_WrCmd(byte cmd)
//  329 {
//  330   byte i=8;
OLED_WrCmd:
        MOVS     R1,#+8
//  331   //LCD_CS=0;;
//  332   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x800000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  333   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_0
//  334   //asm("nop");   
//  335   while(i--)
//  336   {
//  337     if(cmd&0x80){GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;;}
//  338     else{GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;;;}
??OLED_WrCmd_1:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  339     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;
??OLED_WrCmd_2:
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  340     asm("nop");;;;
        nop
//  341     //asm("nop");             
//  342     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  343     cmd<<=1;;;;;   
        LSLS     R0,R0,#+1
??OLED_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrCmd_1
        LDR.W    R2,??DataTable14_1  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable14_1  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_2
//  344   } 	
//  345   //LCD_CS=1;
//  346 }
??OLED_WrCmd_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  347 void OLED_Set_Pos(byte x, byte y)
//  348 { 
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  349   OLED_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  350   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  351   OLED_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  352 } 
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  353 void OLED_Fill(byte bmp_data)
//  354 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  355   byte y,x;
//  356   for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??OLED_Fill_0
//  357   {
//  358     OLED_WrCmd(0xb0+y);
//  359     OLED_WrCmd(0x01);
//  360     OLED_WrCmd(0x10);
//  361     for(x=0;x<X_WIDTH;x++)
//  362       OLED_WrDat(bmp_data);
??OLED_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??OLED_Fill_1
        ADDS     R5,R5,#+1
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R6,#+0
        B.N      ??OLED_Fill_2
//  363   }
//  364 }
??OLED_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  365 void OLED_CLS(void)
//  366 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  367   byte y,x;	
//  368   for(y=4;y<8;y++)
        MOVS     R4,#+4
        B.N      ??OLED_CLS_0
//  369   {
//  370     OLED_WrCmd(0xb0+y);
//  371     OLED_WrCmd(0x01);
//  372     OLED_WrCmd(0x10); 
//  373     for(x=0;x<X_WIDTH;x++)
//  374       OLED_WrDat(0);
??OLED_CLS_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??OLED_CLS_1
        ADDS     R4,R4,#+1
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B.N      ??OLED_CLS_2
//  375   }
//  376 }
??OLED_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  377 void OLED_DLY_ms(word ms)
//  378 {                         
OLED_DLY_ms:
        B.N      ??OLED_DLY_ms_0
//  379   word a;
//  380   while(ms)
//  381   {
//  382     a=13350;
??OLED_DLY_ms_1:
        MOVW     R1,#+13350
//  383     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  384     ms--;
        SUBS     R0,R0,#+1
//  385   }
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??OLED_DLY_ms_1
//  386   return;
        BX       LR               ;; return
//  387 }
//  388 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  389 void OLED_Init(void)        
//  390 {
OLED_Init:
        PUSH     {R7,LR}
//  391   //设置PORTA pin14,pin15为GPIO口 
//  392   PORT_PCR_REG(OLED_PPORT,OLED0)=(0|PORT_PCR_MUX(1));
        MOV      R0,#+256
        LDR.W    R1,??DataTable14_7  ;; 0x4004a050
        STR      R0,[R1, #+0]
//  393   PORT_PCR_REG(OLED_PPORT,OLED1)=(0|PORT_PCR_MUX(1)); 
        MOV      R0,#+256
        LDR.W    R1,??DataTable14_8  ;; 0x4004a054
        STR      R0,[R1, #+0]
//  394   PORT_PCR_REG(OLED_PPORT,OLED2)=(0|PORT_PCR_MUX(1));
        MOV      R0,#+256
        LDR.W    R1,??DataTable14_9  ;; 0x4004a058
        STR      R0,[R1, #+0]
//  395   PORT_PCR_REG(OLED_PPORT,OLED3)=(0|PORT_PCR_MUX(1)); 
        MOV      R0,#+256
        LDR.W    R1,??DataTable14_10  ;; 0x4004a05c
        STR      R0,[R1, #+0]
//  396   //设置PORTA pin14,pin15,pin16,pin17为输出方向
//  397   GPIO_PDDR_REG(OLED_GPORT)=GPIO_PDDR_PDD(GPIO_PIN(OLED0)|GPIO_PIN(OLED1)|GPIO_PIN(OLED2)|GPIO_PIN(OLED3));
        MOVS     R0,#+15728640
        LDR.W    R1,??DataTable14_11  ;; 0x400ff054
        STR      R0,[R1, #+0]
//  398   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0));
        LDR.W    R0,??DataTable14_1  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x100000
        LDR.W    R1,??DataTable14_1  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  399   //LCD_CS=1;	//预制SLK和SS为高电平   		
//  400   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED2));
        LDR.W    R0,??DataTable14_1  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        BICS     R0,R0,#0x400000
        LDR.W    R1,??DataTable14_1  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  401   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  402   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED2));
        LDR.W    R0,??DataTable14_1  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x400000
        LDR.W    R1,??DataTable14_1  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  403   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  404   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  405   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  406   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  407   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  408   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  409   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  410   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  411   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  412   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  413   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  414   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  415   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  416   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  417   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  418   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  419   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  420   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  421   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  422   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  423   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  424   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  425   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  426   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  427   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  428   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  429   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  430   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  431   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  432   OLED_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  433   OLED_Fill(0xff);//黑屏 
        MOVS     R0,#+255
        BL       OLED_Fill
//  434   //OLED_DLY_ms(1000);
//  435   OLED_Fill(0x00);//亮屏  
        MOVS     R0,#+0
        BL       OLED_Fill
//  436   //OLED_DLY_ms(1000);  
//  437 } 
        POP      {R0,PC}          ;; return
//  438 //==============================================================
//  439 //函数名： void LCD_PutPixel(byte x,byte y)
//  440 //功能描述：绘制一个点（x,y）
//  441 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  442 //返回：无
//  443 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  444 void OLED_PutPixel(byte x,byte y)
//  445 {
OLED_PutPixel:
        PUSH     {R4,LR}
//  446   byte data1;  //data1当前点的数据 
//  447   data1 = 0x01<<(y%8); 	
        MOVS     R2,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R3,#+8
        SDIV     R4,R1,R3
        MLS      R4,R4,R3,R1
        LSLS     R4,R2,R4
//  448   OLED_Set_Pos(x,(y>>3)); 
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSRS     R1,R1,#+3
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  449   OLED_WrDat(data1);  	 	
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  450 }
        POP      {R4,PC}          ;; return
//  451 
//  452 //==============================================================
//  453 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
//  454 //功能描述：写入一组标准ASCII字符串
//  455 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  456 //返回：无
//  457 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  458 void OLED_P6x8Str(byte x,byte y,byte ch[])
//  459 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  460   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str_0
//  461   while (ch[j]!='\0')
//  462   {    
//  463     c =ch[j]-32;
//  464     if(x>126){x=0;y++;}
//  465     OLED_Set_Pos(x,y);    
//  466     for(i=0;i<6;i++)     
//  467       OLED_WrDat(F6x8[c][i]);  
??OLED_P6x8Str_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable15
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str_1
//  468     x+=6;
        ADDS     R4,R4,#+6
//  469     j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str_2
//  470   }
//  471 }
??OLED_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  472 void OLED_P6x8Str1(byte x,byte y,byte ch[])
//  473 {
OLED_P6x8Str1:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  474   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str1_0
//  475   while (ch[j]!='\0')
//  476   {    
//  477     c =ch[j]-32;
//  478     if(x>126){x=0;y++;}
//  479     OLED_Set_Pos(x,y);    
//  480     for(i=0;i<6;i++)     
//  481       OLED_WrDat1(F6x8[c][i]);  
??OLED_P6x8Str1_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable15
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat1
        ADDS     R8,R8,#+1
??OLED_P6x8Str1_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str1_1
//  482     x+=6;
        ADDS     R4,R4,#+6
//  483     j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str1_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str1_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str1_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str1_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str1_2
//  484   }
//  485 }
??OLED_P6x8Str1_3:
        POP      {R0,R4-R9,PC}    ;; return
//  486 //==============================================================
//  487 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
//  488 //功能描述：写入一组标准ASCII字符串
//  489 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  490 //返回：无
//  491 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  492 void OLED_P8x16Str(byte x,byte y,byte ch[])
//  493 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  494   byte c=0,i=0,j=0;     
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P8x16Str_0
//  495   while (ch[j]!='\0')
//  496   {    
//  497     c =ch[j]-32;
//  498     if(x>120){x=0;y++;}
//  499     OLED_Set_Pos(x,y);    
//  500     for(i=0;i<8;i++)     
//  501       OLED_WrDat(F8X16[c*16+i]);
//  502     OLED_Set_Pos(x,y+1);    
//  503     for(i=0;i<8;i++)     
//  504       OLED_WrDat(F8X16[c*16+i+8]);  
??OLED_P8x16Str_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.W    R1,??DataTable15_1
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_1
//  505   x+=8;
        ADDS     R4,R4,#+8
//  506   j++;
        ADDS     R9,R9,#+1
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_5
??OLED_P8x16Str_6:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.W    R1,??DataTable15_1
        LDRB     R0,[R0, R1]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_2
//  507   }
//  508 }
??OLED_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  509 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  510 void OLED_P12x12Str(byte x,byte y,byte ch[])
//  511 {
OLED_P12x12Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
//  512 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
//  513 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??OLED_P12x12Str_0
//  514 	
//  515 	while(ch[ii] != '\0')
//  516 	{
//  517   	wm = 0;
//  518   	adder = 1;
//  519   	while(F12x12_Idx[wm] > 127)
//  520   	{
//  521   		if(F12x12_Idx[wm] == ch[ii])
//  522   		{
//  523   			if(F12x12_Idx[wm + 1] == ch[ii + 1])
//  524   			{
//  525   				adder = wm * 12;
//  526   				break;
//  527   			}
//  528   		}
//  529   		wm += 2;			
//  530   	}
//  531   	if(x>118){x=0;y++;}
//  532   	OLED_Set_Pos(x , y); 
//  533   	if(adder != 1)// 显示汉字					
//  534   	{
//  535   		OLED_Set_Pos(x , y);
//  536   		for(wm = 0;wm < 12;wm++)               
//  537   		{
//  538   			OLED_WrDat(F12x12[adder]);	
//  539   			adder += 1;
//  540   		}      
//  541   		OLED_Set_Pos(x,y + 1); 
//  542   		for(wm = 0;wm < 12;wm++)          
//  543   		{
//  544   			OLED_WrDat(F12x12[adder]);
//  545   			adder += 1;
//  546   		}   		
//  547   	}
//  548   	else			  //显示空白字符			
//  549   	{
//  550   		ii += 1;
//  551       OLED_Set_Pos(x,y);
//  552   		for(wm = 0;wm < 12;wm++)
//  553   		{
//  554   				OLED_WrDat(0);
//  555   		}
//  556   		OLED_Set_Pos(x,y + 1);
//  557   		for(wm = 0;wm < 12;wm++)
//  558   		{   		
//  559   				OLED_WrDat(0);	
??OLED_P12x12Str_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
//  560   		}
        ADDS     R9,R9,#+1
??OLED_P12x12Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_1
//  561   	}
//  562   	x += 12;
??OLED_P12x12Str_3:
        ADDS     R6,R6,#+12
//  563   	ii += 2;
        ADDS     R7,R7,#+2
??OLED_P12x12Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??OLED_P12x12Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??OLED_P12x12Str_5
??OLED_P12x12Str_6:
        ADDS     R9,R9,#+2
??OLED_P12x12Str_5:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.W    R0,??DataTable15_2
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P12x12Str_7
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.W    R0,??DataTable15_2
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??OLED_P12x12Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.W    R0,??DataTable15_2
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P12x12Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+12
        SMULBB   R8,R9,R0
??OLED_P12x12Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??OLED_P12x12Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??OLED_P12x12Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+1
        BEQ.N    ??OLED_P12x12Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_10
??OLED_P12x12Str_11:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.W    R0,??DataTable15_3
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??OLED_P12x12Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
??OLED_P12x12Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BGE.N    ??OLED_P12x12Str_3
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.W    R0,??DataTable15_3
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??OLED_P12x12Str_12
??OLED_P12x12Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_13
??OLED_P12x12Str_14:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
??OLED_P12x12Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_2
//  564 	}
//  565 }
??OLED_P12x12Str_4:
        POP      {R0,R4-R9,PC}    ;; return
//  566 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  567 void OLED_Print(byte x, byte y, byte ch[])
//  568 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  569 	byte ch2[3];
//  570 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??OLED_Print_0
//  571 	while(ch[ii] != '\0')
//  572 	{
//  573 		if(ch[ii] > 127)
//  574 		{
//  575 			ch2[0] = ch[ii];
??OLED_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  576 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  577 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  578 			OLED_P12x12Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P12x12Str
//  579 			x += 12;
        ADDS     R4,R4,#+12
//  580 			ii += 2;
        ADDS     R7,R7,#+2
//  581 		}
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print_1
//  582 		else
//  583 		{
//  584 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  585 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  586 			OLED_P6x8Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  587 			x += 6;
        ADDS     R4,R4,#+6
//  588 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  589 		}
//  590 	}
//  591 } 
??OLED_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
//  592 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  593 void OLED_Print1(byte x, byte y, byte ch[])
//  594 {
OLED_Print1:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  595 	byte ch2[3];
//  596 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??OLED_Print1_0
//  597 	while(ch[ii] != '\0')
//  598 	{
//  599 		if(ch[ii] > 127)
//  600 		{
//  601 			ch2[0] = ch[ii];
??OLED_Print1_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  602 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  603 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  604 			OLED_P12x12Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P12x12Str
//  605 			x += 12;
        ADDS     R4,R4,#+12
//  606 			ii += 2;
        ADDS     R7,R7,#+2
//  607 		}
??OLED_Print1_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print1_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print1_1
//  608 		else
//  609 		{
//  610 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  611 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  612 			OLED_P6x8Str1(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str1
//  613 			x += 6;
        ADDS     R4,R4,#+6
//  614 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print1_0
//  615 		}
//  616 	}
//  617 } 
??OLED_Print1_2:
        POP      {R0,R4-R7,PC}    ;; return
//  618 //==============================================================
//  619 //函数名： void LCD_write6x8_num(byte x,byte y,int data_num)
//  620 //功能描述：显示三位数字
//  621 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7，要显示的数字data_num
//  622 //返回：无
//  623 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  624 void OLED_writenum_1(byte x,byte y,int data_num) 
//  625  {
OLED_writenum_1:
        PUSH     {R0-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  626     int ge;
//  627     byte data_num1[2]="0";
        LDR.W    R0,??DataTable15_4
        LDRH     R0,[R0, #+0]
        STRH     R0,[SP, #+0]
//  628     byte data_num2[]="0123456789";
        ADD      R0,SP,#+4
        LDR.W    R1,??DataTable15_5
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  629 
//  630     ge =data_num%10;
        MOVS     R0,#+10
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
//  631 
//  632     data_num1[0]=data_num2[ge];
        ADD      R1,SP,#+4
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+0]
//  633     
//  634     OLED_P6x8Str(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  635  }
        POP      {R0-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  636 void OLED_writenum_2(byte x,byte y,int data_num) 
//  637  {
OLED_writenum_2:
        PUSH     {R0-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  638     int shi,ge;
//  639     byte data_num1[3]="00";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable15_6
        MOVS     R2,#+3
        BL       __aeabi_memcpy
//  640     byte data_num2[]="0123456789";
        ADD      R0,SP,#+4
        LDR.W    R1,??DataTable15_7
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  641 
//  642     shi=data_num%100/10;
        MOVS     R0,#+100
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+10
        SDIV     R0,R0,R1
//  643     ge =data_num%10;
        MOVS     R1,#+10
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
//  644 
//  645     data_num1[0]=data_num2[shi];
        ADD      R2,SP,#+4
        LDRB     R0,[R0, R2]
        STRB     R0,[SP, #+0]
//  646     data_num1[1]=data_num2[ge];
        ADD      R0,SP,#+4
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  647     
//  648     OLED_P6x8Str(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  649  }
        POP      {R0-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  650 void OLED_writenum_3(byte x,byte y,int data_num) 
//  651  {
OLED_writenum_3:
        PUSH     {R0-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  652     int bai,shi,ge;
//  653     byte data_num1[4]="000";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable15_8
        LDR      R2,[R1, #0]
        STR      R2,[R0, #+0]
//  654     byte data_num2[]="0123456789";
        ADD      R0,SP,#+4
        LDR.W    R1,??DataTable15_9
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  655 
//  656     bai=data_num%1000/100;
        MOV      R0,#+1000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+100
        SDIV     R0,R0,R1
//  657     shi=data_num%100/10;
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R1,R1,R2
//  658     ge =data_num%10;
        MOVS     R2,#+10
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
//  659 
//  660     data_num1[0]=data_num2[bai];
        ADD      R3,SP,#+4
        LDRB     R0,[R0, R3]
        STRB     R0,[SP, #+0]
//  661     data_num1[1]=data_num2[shi];
        ADD      R0,SP,#+4
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  662     data_num1[2]=data_num2[ge];
        ADD      R0,SP,#+4
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  663     
//  664     OLED_P6x8Str(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  665  }
        POP      {R0-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  666 void OLED_writenum_4(byte x,byte y,int data_num) 
//  667  {
OLED_writenum_4:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  668     int qian,bai,shi,ge;
//  669     byte data_num1[5]="0000";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable15_10
        MOVS     R2,#+5
        BL       __aeabi_memcpy
//  670     byte data_num2[]="0123456789";
        ADD      R0,SP,#+8
        LDR.W    R1,??DataTable15_11
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  671 
//  672     qian=data_num%10000/1000;
        MOVW     R0,#+10000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOV      R1,#+1000
        SDIV     R0,R0,R1
//  673     bai=data_num%1000/100;
        MOV      R1,#+1000
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+100
        SDIV     R1,R1,R2
//  674     shi=data_num%100/10;
        MOVS     R2,#+100
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
        MOVS     R3,#+10
        SDIV     R2,R2,R3
//  675     ge =data_num%10;
        MOVS     R3,#+10
        SDIV     R7,R6,R3
        MLS      R3,R3,R7,R6
//  676   
//  677     data_num1[0]=data_num2[qian];
        ADD      R6,SP,#+8
        LDRB     R0,[R0, R6]
        STRB     R0,[SP, #+0]
//  678     data_num1[1]=data_num2[bai];
        ADD      R0,SP,#+8
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  679     data_num1[2]=data_num2[shi];
        ADD      R0,SP,#+8
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  680     data_num1[3]=data_num2[ge];
        ADD      R0,SP,#+8
        LDRB     R0,[R3, R0]
        STRB     R0,[SP, #+3]
//  681 
//  682     
//  683     OLED_P6x8Str(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  684  }
        ADD      SP,SP,#+20
        POP      {R4-R7,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  685 void OLED_writenum_6(byte x,byte y,int data_num) 
//  686  {
OLED_writenum_6:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  687     int swan,wan,qian,bai,shi,ge;
//  688     byte data_num1[7]="000000";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable15_12
        MOVS     R2,#+7
        BL       __aeabi_memcpy
//  689     byte data_num2[]="0123456789";
        ADD      R0,SP,#+8
        LDR.W    R1,??DataTable15_13
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  690     
//  691     swan=data_num%1000000/100000;
        LDR.W    R0,??DataTable15_14  ;; 0xf4240
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        LDR.W    R1,??DataTable15_15  ;; 0x186a0
        SDIV     R0,R0,R1
//  692     wan=data_num%100000/10000;
        LDR.W    R1,??DataTable15_15  ;; 0x186a0
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVW     R2,#+10000
        SDIV     R1,R1,R2
//  693     qian=data_num%10000/1000;
        MOVW     R2,#+10000
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
        MOV      R3,#+1000
        SDIV     R2,R2,R3
//  694     bai=data_num%1000/100;
        MOV      R3,#+1000
        SDIV     R7,R6,R3
        MLS      R3,R3,R7,R6
        MOVS     R7,#+100
        SDIV     R3,R3,R7
//  695     shi=data_num%100/10;
        MOVS     R7,#+100
        SDIV     R12,R6,R7
        MLS      R7,R7,R12,R6
        MOVS     R12,#+10
        SDIV     R7,R7,R12
//  696     ge =data_num%10;
        MOVS     R12,#+10
        SDIV     LR,R6,R12
        MLS      R6,R12,LR,R6
//  697   
//  698     data_num1[0]=data_num2[swan];
        ADD      R12,SP,#+8
        LDRB     R0,[R0, R12]
        STRB     R0,[SP, #+0]
//  699     data_num1[1]=data_num2[wan];
        ADD      R0,SP,#+8
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  700     data_num1[2]=data_num2[qian];
        ADD      R0,SP,#+8
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  701     data_num1[3]=data_num2[bai];
        ADD      R0,SP,#+8
        LDRB     R0,[R3, R0]
        STRB     R0,[SP, #+3]
//  702     data_num1[4]=data_num2[shi];
        ADD      R0,SP,#+8
        LDRB     R0,[R7, R0]
        STRB     R0,[SP, #+4]
//  703     data_num1[5]=data_num2[ge];
        ADD      R0,SP,#+8
        LDRB     R0,[R6, R0]
        STRB     R0,[SP, #+5]
//  704 
//  705     
//  706     OLED_P6x8Str(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  707  }
        ADD      SP,SP,#+20
        POP      {R4-R7,PC}       ;; return
//  708 
//  709 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  710 void OLED_write_float(byte x,byte y,float data_num) 
//  711  {
OLED_write_float:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  712     int zheng = (int)data_num;
        MOVS     R0,R6
        BL       __aeabi_f2iz
        MOVS     R7,R0
//  713     if(zheng>=10&&zheng<100) 
        SUBS     R0,R7,#+10
        CMP      R0,#+90
        BCS.N    ??OLED_write_float_0
//  714     {
//  715       OLED_writenum_2(x,y,zheng);
        MOVS     R2,R7
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_2
//  716       OLED_P6x8Str(x+12,y,".");
        ADR.N    R2,??DataTable13  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  717       OLED_writenum_2(x+18,y,(int)((data_num-zheng)*100));
        MOVS     R0,R7
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R6
        BL       __aeabi_fsub
        LDR.W    R1,??DataTable15_16  ;; 0x42c80000
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        MOVS     R2,R0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_2
        B.N      ??OLED_write_float_1
//  718     }
//  719     else if(zheng>=100&&zheng<1000) 
??OLED_write_float_0:
        SUBS     R0,R7,#+100
        CMP      R0,#+900
        BCS.N    ??OLED_write_float_2
//  720     {
//  721       OLED_writenum_3(x,y,zheng);
        MOVS     R2,R7
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_3
//  722       OLED_P6x8Str(x+18,y,".");
        ADR.N    R2,??DataTable13  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  723       OLED_writenum_1(x+24,y,(int)((data_num-zheng)*10));
        MOVS     R0,R7
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R6
        BL       __aeabi_fsub
        LDR.W    R1,??DataTable15_17  ;; 0x41200000
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        MOVS     R2,R0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_1
        B.N      ??OLED_write_float_1
//  724     }
//  725     else if(zheng<10) 
??OLED_write_float_2:
        CMP      R7,#+10
        BGE.N    ??OLED_write_float_1
//  726     {
//  727       OLED_writenum_1(x,y,zheng);
        MOVS     R2,R7
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_1
//  728       OLED_P6x8Str(x+6,y,".");
        ADR.N    R2,??DataTable13  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  729       OLED_writenum_3(x+12,y,(int)((data_num-zheng)*1000));
        MOVS     R0,R7
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R6
        BL       __aeabi_fsub
        LDR.W    R1,??DataTable15_18  ;; 0x447a0000
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        MOVS     R2,R0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_writenum_3
//  730     }
//  731  }
??OLED_write_float_1:
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13:
        DC8      ".",0x0,0x0
//  732 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  733 void OLED_Disp_Paremeter()
//  734 {
OLED_Disp_Paremeter:
        PUSH     {R7,LR}
//  735         if(Button_value[0] == 0)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??OLED_Disp_Paremeter_0
//  736         {
//  737           OLED_Print1(0,0,"P:");
        ADR.N    R2,??DataTable14  ;; 0x50, 0x3A, 0x00, 0x00
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_1
//  738         }
//  739         else
//  740         {
//  741           OLED_Print(0,0,"P:");
??OLED_Disp_Paremeter_0:
        ADR.N    R2,??DataTable14  ;; 0x50, 0x3A, 0x00, 0x00
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Print
//  742         }
//  743         OLED_write_float(20,0,P/100);
??OLED_Disp_Paremeter_1:
        LDR.W    R0,??DataTable15_20
        LDR      R0,[R0, #+0]
        LDR.W    R1,??DataTable15_16  ;; 0x42c80000
        BL       __aeabi_fdiv
        MOVS     R2,R0
        MOVS     R1,#+0
        MOVS     R0,#+20
        BL       OLED_write_float
//  744         
//  745         if(Button_value[0] == 1)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??OLED_Disp_Paremeter_2
//  746         {
//  747           OLED_Print1(0,1,"I:");
        ADR.N    R2,??DataTable14_2  ;; 0x49, 0x3A, 0x00, 0x00
        MOVS     R1,#+1
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_3
//  748         }
//  749         else
//  750         {
//  751           OLED_Print(0,1,"I:");
??OLED_Disp_Paremeter_2:
        ADR.N    R2,??DataTable14_2  ;; 0x49, 0x3A, 0x00, 0x00
        MOVS     R1,#+1
        MOVS     R0,#+0
        BL       OLED_Print
//  752         }
//  753         OLED_write_float(20,1,I/100);
??OLED_Disp_Paremeter_3:
        LDR.W    R0,??DataTable15_21
        LDR      R0,[R0, #+0]
        LDR.W    R1,??DataTable15_16  ;; 0x42c80000
        BL       __aeabi_fdiv
        MOVS     R2,R0
        MOVS     R1,#+1
        MOVS     R0,#+20
        BL       OLED_write_float
//  754         
//  755         if(Button_value[0] == 2)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??OLED_Disp_Paremeter_4
//  756         {
//  757           OLED_Print1(0,2,"D:");
        ADR.N    R2,??DataTable14_3  ;; 0x44, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_5
//  758         }
//  759         else
//  760         {
//  761           OLED_Print(0,2,"D:");
??OLED_Disp_Paremeter_4:
        ADR.N    R2,??DataTable14_3  ;; 0x44, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+0
        BL       OLED_Print
//  762         }
//  763         OLED_write_float(20,2,Dif/100);
??OLED_Disp_Paremeter_5:
        LDR.W    R0,??DataTable15_22
        LDR      R0,[R0, #+0]
        LDR.W    R1,??DataTable15_16  ;; 0x42c80000
        BL       __aeabi_fdiv
        MOVS     R2,R0
        MOVS     R1,#+2
        MOVS     R0,#+20
        BL       OLED_write_float
//  764         
//  765         if(Button_value[0] == 3)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+3
        BNE.N    ??OLED_Disp_Paremeter_6
//  766         {
//  767           OLED_Print1(65,0,"p:");
        ADR.N    R2,??DataTable14_4  ;; 0x70, 0x3A, 0x00, 0x00
        MOVS     R1,#+0
        MOVS     R0,#+65
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_7
//  768         }
//  769         else
//  770         {
//  771           OLED_Print(65,0,"p:");
??OLED_Disp_Paremeter_6:
        ADR.N    R2,??DataTable14_4  ;; 0x70, 0x3A, 0x00, 0x00
        MOVS     R1,#+0
        MOVS     R0,#+65
        BL       OLED_Print
//  772         }
//  773         OLED_write_float(85,0,p);
??OLED_Disp_Paremeter_7:
        LDR.W    R0,??DataTable15_23
        LDR      R2,[R0, #+0]
        MOVS     R1,#+0
        MOVS     R0,#+85
        BL       OLED_write_float
//  774         
//  775         if(Button_value[0] == 4)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4
        BNE.N    ??OLED_Disp_Paremeter_8
//  776         {
//  777           OLED_Print1(65,1,"d:");
        ADR.N    R2,??DataTable14_5  ;; 0x64, 0x3A, 0x00, 0x00
        MOVS     R1,#+1
        MOVS     R0,#+65
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_9
//  778         }
//  779         else
//  780         {
//  781           OLED_Print(65,1,"d:");
??OLED_Disp_Paremeter_8:
        ADR.N    R2,??DataTable14_5  ;; 0x64, 0x3A, 0x00, 0x00
        MOVS     R1,#+1
        MOVS     R0,#+65
        BL       OLED_Print
//  782         }
//  783         OLED_write_float(85,1,d);
??OLED_Disp_Paremeter_9:
        LDR.W    R0,??DataTable15_24
        LDR      R2,[R0, #+0]
        MOVS     R1,#+1
        MOVS     R0,#+85
        BL       OLED_write_float
//  784         
//  785         if(Button_value[0] == 5)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+5
        BNE.N    ??OLED_Disp_Paremeter_10
//  786         {
//  787           OLED_Print1(65,2,"V:");
        ADR.N    R2,??DataTable14_6  ;; 0x56, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+65
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_11
//  788         }
//  789         else
//  790         {
//  791           OLED_Print(65,2,"V:");
??OLED_Disp_Paremeter_10:
        ADR.N    R2,??DataTable14_6  ;; 0x56, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+65
        BL       OLED_Print
//  792         }
//  793         OLED_write_float(85,2,v/100);
??OLED_Disp_Paremeter_11:
        LDR.W    R0,??DataTable15_25
        LDR      R0,[R0, #+0]
        LDR.W    R1,??DataTable15_16  ;; 0x42c80000
        BL       __aeabi_fdiv
        MOVS     R2,R0
        MOVS     R1,#+2
        MOVS     R0,#+85
        BL       OLED_write_float
//  794         
//  795         if(Button_value[0] == 6)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+6
        BNE.N    ??OLED_Disp_Paremeter_12
//  796         {
//  797           OLED_Print1(0,3,"time:");
        LDR.W    R2,??DataTable15_26
        MOVS     R1,#+3
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_13
//  798         }
//  799         else
//  800         {
//  801           OLED_Print(0,3,"time:");
??OLED_Disp_Paremeter_12:
        LDR.W    R2,??DataTable15_26
        MOVS     R1,#+3
        MOVS     R0,#+0
        BL       OLED_Print
//  802         }
//  803         OLED_write_float(50,3,t/1000);
??OLED_Disp_Paremeter_13:
        LDR.W    R0,??DataTable15_27
        LDR      R0,[R0, #+0]
        LDR.W    R1,??DataTable15_18  ;; 0x447a0000
        BL       __aeabi_fdiv
        MOVS     R2,R0
        MOVS     R1,#+3
        MOVS     R0,#+50
        BL       OLED_write_float
//  804         
//  805         if(Button_value[0] == 7)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+7
        BNE.N    ??OLED_Disp_Paremeter_14
//  806         {
//  807           OLED_Print1(0,4,"zhi:");
        LDR.W    R2,??DataTable15_28
        MOVS     R1,#+4
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_15
//  808         }
//  809         else
//  810         {
//  811           OLED_Print(0,4,"zhi:");
??OLED_Disp_Paremeter_14:
        LDR.W    R2,??DataTable15_28
        MOVS     R1,#+4
        MOVS     R0,#+0
        BL       OLED_Print
//  812         }
//  813         OLED_writenum_3(30,4,zhi_speed);
??OLED_Disp_Paremeter_15:
        LDR.W    R0,??DataTable15_29
        LDR      R2,[R0, #+0]
        MOVS     R1,#+4
        MOVS     R0,#+30
        BL       OLED_writenum_3
//  814         
//  815         if(Button_value[0] == 8)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+8
        BNE.N    ??OLED_Disp_Paremeter_16
//  816         {
//  817           OLED_Print1(60,4,"wan:");
        LDR.W    R2,??DataTable15_30
        MOVS     R1,#+4
        MOVS     R0,#+60
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_17
//  818         }
//  819         else
//  820         {
//  821           OLED_Print(60,4,"wan:");
??OLED_Disp_Paremeter_16:
        LDR.W    R2,??DataTable15_30
        MOVS     R1,#+4
        MOVS     R0,#+60
        BL       OLED_Print
//  822         }
//  823         OLED_writenum_3(80,4,wan_speed);
??OLED_Disp_Paremeter_17:
        LDR.W    R0,??DataTable15_31
        LDR      R2,[R0, #+0]
        MOVS     R1,#+4
        MOVS     R0,#+80
        BL       OLED_writenum_3
//  824         
//  825         if(Button_value[0] == 9)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+9
        BNE.N    ??OLED_Disp_Paremeter_18
//  826         {
//  827           OLED_Print1(0,5,"Podao:");
        LDR.W    R2,??DataTable15_32
        MOVS     R1,#+5
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_19
//  828         }
//  829         else
//  830         {
//  831           OLED_Print(0,5,"Podao:");
??OLED_Disp_Paremeter_18:
        LDR.W    R2,??DataTable15_32
        MOVS     R1,#+5
        MOVS     R0,#+0
        BL       OLED_Print
//  832         }
//  833         OLED_writenum_3(36,5,pd_speed);
??OLED_Disp_Paremeter_19:
        LDR.W    R0,??DataTable15_33
        LDR      R2,[R0, #+0]
        MOVS     R1,#+5
        MOVS     R0,#+36
        BL       OLED_writenum_3
//  834        
//  835          if(Button_value[0] == 10)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+10
        BNE.N    ??OLED_Disp_Paremeter_20
//  836         {
//  837           OLED_Print1(0,6,"Save to SD!");
        LDR.W    R2,??DataTable15_34
        MOVS     R1,#+6
        MOVS     R0,#+0
        BL       OLED_Print1
        B.N      ??OLED_Disp_Paremeter_21
//  838         }
//  839         else
//  840         {
//  841           OLED_Print(0,6,"Save to SD!");
??OLED_Disp_Paremeter_20:
        LDR.W    R2,??DataTable15_34
        MOVS     R1,#+6
        MOVS     R0,#+0
        BL       OLED_Print
//  842         }
//  843         
//  844         if(Button_value[2] == TRUE)
??OLED_Disp_Paremeter_21:
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+4]
        CMP      R0,#+1
        BNE.N    ??OLED_Disp_Paremeter_22
//  845         {
//  846           OLED_Print(70,6,"Change");
        LDR.W    R2,??DataTable15_35
        MOVS     R1,#+6
        MOVS     R0,#+70
        BL       OLED_Print
        B.N      ??OLED_Disp_Paremeter_23
//  847         }
//  848         else
//  849         {
//  850           OLED_Print(70,6,"      ");
??OLED_Disp_Paremeter_22:
        LDR.W    R2,??DataTable15_36
        MOVS     R1,#+6
        MOVS     R0,#+70
        BL       OLED_Print
//  851         }
//  852 }
??OLED_Disp_Paremeter_23:
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14:
        DC8      0x50, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_1:
        DC32     0x400ff040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_2:
        DC8      0x49, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_3:
        DC8      0x44, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_4:
        DC8      0x70, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_5:
        DC8      0x64, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_6:
        DC8      0x56, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_7:
        DC32     0x4004a050

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_8:
        DC32     0x4004a054

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_9:
        DC32     0x4004a058

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_10:
        DC32     0x4004a05c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_11:
        DC32     0x400ff054

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  853 void OLED_Change_Perameter()
//  854 {
OLED_Change_Perameter:
        PUSH     {R7,LR}
//  855   LPLD_PIT_ClearIsr(PIT0);
        MOVS     R0,#+0
        BL       LPLD_PIT_ClearIsr
//  856     LPLD_FTM0_PWM_ChangeDuty(4, 0);
        MOVS     R1,#+0
        MOVS     R0,#+4
        BL       LPLD_FTM0_PWM_ChangeDuty
//  857        LPLD_FTM0_PWM_ChangeDuty(5, 0);
        MOVS     R1,#+0
        MOVS     R0,#+5
        BL       LPLD_FTM0_PWM_ChangeDuty
//  858        LPLD_FTM0_PWM_ChangeDuty(6, 0);
        MOVS     R1,#+0
        MOVS     R0,#+6
        BL       LPLD_FTM0_PWM_ChangeDuty
//  859        LPLD_FTM0_PWM_ChangeDuty(7, 0);
        MOVS     R1,#+0
        MOVS     R0,#+7
        BL       LPLD_FTM0_PWM_ChangeDuty
//  860     Time = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable15_37
        STRH     R0,[R1, #+0]
//  861       //按键1--上
//  862       if(Get_Button(1) == 0)
        MOVS     R1,#+3
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_0
//  863         {
//  864           Button_flag[0]++;
        LDR.W    R0,??DataTable15_38
        LDRH     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable15_38
        STRH     R0,[R1, #+0]
//  865         }
//  866       if(Get_Button(1) == 1)
??OLED_Change_Perameter_0:
        MOVS     R1,#+3
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+1
        BNE.W    ??OLED_Change_Perameter_1
//  867       {
//  868         if(Button_flag[0]>10)
        LDR.W    R0,??DataTable15_38
        LDRH     R0,[R0, #+0]
        CMP      R0,#+11
        BLT.W    ??OLED_Change_Perameter_1
//  869         {
//  870           Button_flag[0] = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable15_38
        STRH     R0,[R1, #+0]
//  871           if(Button_value[2] == TRUE)
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+4]
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_2
//  872           {
//  873             if(Button_value[0] == 0) P+=10;
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_3
        LDR.W    R0,??DataTable15_20
        LDR      R1,[R0, #+0]
        LDR.W    R0,??DataTable15_17  ;; 0x41200000
        BL       __aeabi_fadd
        LDR.W    R1,??DataTable15_20
        STR      R0,[R1, #+0]
//  874             if(Button_value[0] == 1) I+=1;
??OLED_Change_Perameter_3:
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_4
        LDR.W    R0,??DataTable15_21
        LDR      R1,[R0, #+0]
        MOVS     R0,#+1065353216
        BL       __aeabi_fadd
        LDR.W    R1,??DataTable15_21
        STR      R0,[R1, #+0]
//  875             if(Button_value[0] == 2) Dif+=1;
??OLED_Change_Perameter_4:
        LDR.W    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??OLED_Change_Perameter_5
        LDR.W    R0,??DataTable15_22
        LDR      R1,[R0, #+0]
        MOVS     R0,#+1065353216
        BL       __aeabi_fadd
        LDR.W    R1,??DataTable15_22
        STR      R0,[R1, #+0]
//  876             if(Button_value[0] == 3) p+=1;
??OLED_Change_Perameter_5:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+3
        BNE.N    ??OLED_Change_Perameter_6
        LDR.N    R0,??DataTable15_23
        LDR      R1,[R0, #+0]
        MOVS     R0,#+1065353216
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_23
        STR      R0,[R1, #+0]
//  877             if(Button_value[0] == 4) d+=1;
??OLED_Change_Perameter_6:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4
        BNE.N    ??OLED_Change_Perameter_7
        LDR.N    R0,??DataTable15_24
        LDR      R1,[R0, #+0]
        MOVS     R0,#+1065353216
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_24
        STR      R0,[R1, #+0]
//  878             if(Button_value[0] == 5) v+=1;
??OLED_Change_Perameter_7:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+5
        BNE.N    ??OLED_Change_Perameter_8
        LDR.N    R0,??DataTable15_25
        LDR      R1,[R0, #+0]
        MOVS     R0,#+1065353216
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_25
        STR      R0,[R1, #+0]
//  879             if(Button_value[0] == 6) t+=1000;
??OLED_Change_Perameter_8:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+6
        BNE.N    ??OLED_Change_Perameter_9
        LDR.N    R0,??DataTable15_27
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_18  ;; 0x447a0000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_27
        STR      R0,[R1, #+0]
//  880             if(Button_value[0] == 7) zhi_speed+=5;
??OLED_Change_Perameter_9:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+7
        BNE.N    ??OLED_Change_Perameter_10
        LDR.N    R0,??DataTable15_29
        LDR      R0,[R0, #+0]
        ADDS     R0,R0,#+5
        LDR.N    R1,??DataTable15_29
        STR      R0,[R1, #+0]
//  881             if(Button_value[0] == 8) wan_speed+=5;
??OLED_Change_Perameter_10:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+8
        BNE.N    ??OLED_Change_Perameter_11
        LDR.N    R0,??DataTable15_31
        LDR      R0,[R0, #+0]
        ADDS     R0,R0,#+5
        LDR.N    R1,??DataTable15_31
        STR      R0,[R1, #+0]
//  882             if(Button_value[0] == 9) {if(pd_speed<zhi_speed) pd_speed+=5;}
??OLED_Change_Perameter_11:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+9
        BNE.N    ??OLED_Change_Perameter_1
        LDR.N    R0,??DataTable15_33
        LDR      R0,[R0, #+0]
        LDR.N    R1,??DataTable15_29
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BGE.N    ??OLED_Change_Perameter_1
        LDR.N    R0,??DataTable15_33
        LDR      R0,[R0, #+0]
        ADDS     R0,R0,#+5
        LDR.N    R1,??DataTable15_33
        STR      R0,[R1, #+0]
        B.N      ??OLED_Change_Perameter_1
//  883           }
//  884           else
//  885           {
//  886             if(Button_value[0]>0) Button_value[0]--;
??OLED_Change_Perameter_2:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??OLED_Change_Perameter_12
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        SUBS     R0,R0,#+1
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+0]
        B.N      ??OLED_Change_Perameter_1
//  887             else Button_value[0] = 0;
??OLED_Change_Perameter_12:
        MOVS     R0,#+0
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+0]
//  888           }
//  889         }
//  890       }
//  891     //按键2--下
//  892     if(Get_Button(2) == 0)
??OLED_Change_Perameter_1:
        MOVS     R1,#+2
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_13
//  893     {
//  894       Button_flag[1]++;
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+2]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+2]
//  895     }
//  896     if(Get_Button(2) == 1)
??OLED_Change_Perameter_13:
        MOVS     R1,#+2
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+1
        BNE.W    ??OLED_Change_Perameter_14
//  897     {
//  898       if(Button_flag[1]>10)
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+2]
        CMP      R0,#+11
        BLT.W    ??OLED_Change_Perameter_14
//  899       {
//  900         Button_flag[1] = 0;
        MOVS     R0,#+0
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+2]
//  901         if(Button_value[2] == TRUE)
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+4]
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_15
//  902         {
//  903           if(Button_value[0] == 0) P-=10;
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_16
        LDR.N    R0,??DataTable15_20
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_39  ;; 0xc1200000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_20
        STR      R0,[R1, #+0]
//  904           if(Button_value[0] == 1) I-=1;
??OLED_Change_Perameter_16:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_17
        LDR.N    R0,??DataTable15_21
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_40  ;; 0xbf800000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_21
        STR      R0,[R1, #+0]
//  905           if(Button_value[0] == 2) Dif-=1;
??OLED_Change_Perameter_17:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??OLED_Change_Perameter_18
        LDR.N    R0,??DataTable15_22
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_40  ;; 0xbf800000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_22
        STR      R0,[R1, #+0]
//  906           if(Button_value[0] == 3) p-=1;
??OLED_Change_Perameter_18:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+3
        BNE.N    ??OLED_Change_Perameter_19
        LDR.N    R0,??DataTable15_23
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_40  ;; 0xbf800000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_23
        STR      R0,[R1, #+0]
//  907           if(Button_value[0] == 4) d-=1;
??OLED_Change_Perameter_19:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4
        BNE.N    ??OLED_Change_Perameter_20
        LDR.N    R0,??DataTable15_24
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_40  ;; 0xbf800000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_24
        STR      R0,[R1, #+0]
//  908           if(Button_value[0] == 5) v-=1;
??OLED_Change_Perameter_20:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+5
        BNE.N    ??OLED_Change_Perameter_21
        LDR.N    R0,??DataTable15_25
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_40  ;; 0xbf800000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_25
        STR      R0,[R1, #+0]
//  909           if(Button_value[0] == 6) t-=1000;
??OLED_Change_Perameter_21:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+6
        BNE.N    ??OLED_Change_Perameter_22
        LDR.N    R0,??DataTable15_27
        LDR      R1,[R0, #+0]
        LDR.N    R0,??DataTable15_41  ;; 0xc47a0000
        BL       __aeabi_fadd
        LDR.N    R1,??DataTable15_27
        STR      R0,[R1, #+0]
//  910           if(Button_value[0] == 7) zhi_speed-=5;
??OLED_Change_Perameter_22:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+7
        BNE.N    ??OLED_Change_Perameter_23
        LDR.N    R0,??DataTable15_29
        LDR      R0,[R0, #+0]
        SUBS     R0,R0,#+5
        LDR.N    R1,??DataTable15_29
        STR      R0,[R1, #+0]
//  911           if(Button_value[0] == 8) wan_speed-=5;
??OLED_Change_Perameter_23:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+8
        BNE.N    ??OLED_Change_Perameter_24
        LDR.N    R0,??DataTable15_31
        LDR      R0,[R0, #+0]
        SUBS     R0,R0,#+5
        LDR.N    R1,??DataTable15_31
        STR      R0,[R1, #+0]
//  912           if(Button_value[0] == 9) {if(pd_speed>100) pd_speed-=5;}
??OLED_Change_Perameter_24:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+9
        BNE.N    ??OLED_Change_Perameter_14
        LDR.N    R0,??DataTable15_33
        LDR      R0,[R0, #+0]
        CMP      R0,#+101
        BLT.N    ??OLED_Change_Perameter_14
        LDR.N    R0,??DataTable15_33
        LDR      R0,[R0, #+0]
        SUBS     R0,R0,#+5
        LDR.N    R1,??DataTable15_33
        STR      R0,[R1, #+0]
        B.N      ??OLED_Change_Perameter_14
//  913         }
//  914         else
//  915         {
//  916           Button_value[0]++;
??OLED_Change_Perameter_15:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+0]
//  917           if(Button_value[0]>10) Button_value[0] = 10;
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+11
        BLT.N    ??OLED_Change_Perameter_14
        MOVS     R0,#+10
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+0]
//  918         }
//  919       }
//  920     }
//  921     //按键3--确认
//  922     if(Get_Button(3) == 0)
??OLED_Change_Perameter_14:
        MOVS     R1,#+1
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_25
//  923     {
//  924       Button_flag[2]++;
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+4]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+4]
//  925     }
//  926     if(Get_Button(3) == 1)
??OLED_Change_Perameter_25:
        MOVS     R1,#+1
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_26
//  927     {
//  928       if(Button_flag[2]>10)
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+4]
        CMP      R0,#+11
        BLT.N    ??OLED_Change_Perameter_26
//  929       {
//  930         Button_flag[2] = 0;
        MOVS     R0,#+0
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+4]
//  931         if(Button_value[0]==10)
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+10
        BNE.N    ??OLED_Change_Perameter_27
//  932         {
//  933             Write_Flash();
        BL       Write_Flash
//  934         }
//  935           Button_value[2] = !Button_value[2];
??OLED_Change_Perameter_27:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+4]
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_28
        MOVS     R0,#+1
        B.N      ??OLED_Change_Perameter_29
??OLED_Change_Perameter_28:
        MOVS     R0,#+0
??OLED_Change_Perameter_29:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+4]
//  936       }
//  937     }
//  938     //按键4--退出
//  939     if(Get_Button(4) == 0)
??OLED_Change_Perameter_26:
        MOVS     R1,#+0
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_30
//  940     {
//  941       Button_flag[3]++;
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+6]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+6]
//  942     }
//  943     if(Get_Button(4) == 1)
??OLED_Change_Perameter_30:
        MOVS     R1,#+0
        MOVS     R0,#+3
        BL       LPLD_GPIO_Get_b
        CMP      R0,#+1
        BNE.N    ??OLED_Change_Perameter_31
//  944     {
//  945       if(Button_flag[3]>10)
        LDR.N    R0,??DataTable15_38
        LDRH     R0,[R0, #+6]
        CMP      R0,#+11
        BLT.N    ??OLED_Change_Perameter_31
//  946       {
//  947         Button_flag[3] = 0;
        MOVS     R0,#+0
        LDR.N    R1,??DataTable15_38
        STRH     R0,[R1, #+6]
//  948          if(Button_value[0]==10)
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+0]
        CMP      R0,#+10
        BNE.N    ??OLED_Change_Perameter_32
//  949         {
//  950             Reset_Flash();
        BL       Reset_Flash
//  951         }
//  952           Button_value[2] = !Button_value[2];
??OLED_Change_Perameter_32:
        LDR.N    R0,??DataTable15_19
        LDRH     R0,[R0, #+4]
        CMP      R0,#+0
        BNE.N    ??OLED_Change_Perameter_33
        MOVS     R0,#+1
        B.N      ??OLED_Change_Perameter_34
??OLED_Change_Perameter_33:
        MOVS     R0,#+0
??OLED_Change_Perameter_34:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDR.N    R1,??DataTable15_19
        STRH     R0,[R1, #+4]
//  953       }
//  954     }
//  955     LPLD_PIT_SetIsr(PIT0, pit_isr0);
??OLED_Change_Perameter_31:
        LDR.N    R1,??DataTable15_42
        MOVS     R0,#+0
        BL       LPLD_PIT_SetIsr
//  956 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_1:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_2:
        DC32     F12x12_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_3:
        DC32     F12x12

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_4:
        DC32     `?<Constant "0">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_5:
        DC32     `?<Constant "0123456789">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_6:
        DC32     `?<Constant "00">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_7:
        DC32     `?<Constant "0123456789">_1`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_8:
        DC32     `?<Constant "000">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_9:
        DC32     `?<Constant "0123456789">_2`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_10:
        DC32     `?<Constant "0000">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_11:
        DC32     `?<Constant "0123456789">_3`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_12:
        DC32     `?<Constant "000000">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_13:
        DC32     `?<Constant "0123456789">_4`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_14:
        DC32     0xf4240

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_15:
        DC32     0x186a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_16:
        DC32     0x42c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_17:
        DC32     0x41200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_18:
        DC32     0x447a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_19:
        DC32     Button_value

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_20:
        DC32     P

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_21:
        DC32     I

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_22:
        DC32     Dif

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_23:
        DC32     p

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_24:
        DC32     d

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_25:
        DC32     v

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_26:
        DC32     `?<Constant "time:">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_27:
        DC32     t

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_28:
        DC32     `?<Constant "zhi:">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_29:
        DC32     zhi_speed

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_30:
        DC32     `?<Constant "wan:">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_31:
        DC32     wan_speed

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_32:
        DC32     `?<Constant "Podao:">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_33:
        DC32     pd_speed

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_34:
        DC32     `?<Constant "Save to SD!">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_35:
        DC32     `?<Constant "Change">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_36:
        DC32     `?<Constant "      ">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_37:
        DC32     Time

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_38:
        DC32     Button_flag

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_39:
        DC32     0xc1200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_40:
        DC32     0xbf800000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_41:
        DC32     0xc47a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable15_42:
        DC32     pit_isr0

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
//    16 bytes in section .bss
// 2 508 bytes in section .rodata
// 4 444 bytes in section .text
// 
// 4 444 bytes of CODE  memory
// 2 508 bytes of CONST memory
//    16 bytes of DATA  memory
//
//Errors: none
//Warnings: none
