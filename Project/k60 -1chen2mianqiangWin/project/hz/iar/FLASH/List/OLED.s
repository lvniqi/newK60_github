///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       19/Mar/2015  11:05:11
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\app\OLED.c
//    Command line =  
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\app\OLED.c" -D IAR -D LPLD_K60 -lCN
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\FLASH\List\" -lB
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\FLASH\List\" -o
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\FLASH\Obj\" --no_cse --no_unroll
//        --no_inline --no_code_motion --no_tbaa --no_clustering
//        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
//        --dlib_config "D:\IAR Systems\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\app\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\common\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\cpu\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\cpu\headers\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\adc16\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\enet\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\lptmr\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\mcg\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\pmc\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\rtc\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\uart\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\drivers\wdog\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\platforms\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\LPLD\" -I
//        "G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\..\..\..\lib\iar_config_files\"
//        -Ol
//    List file    =  
//        G:\GitHub\newK60_github\Project\k60
//        -1chen2mianqiangWin\project\hz\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN __aeabi_memcpy

        PUBLIC Draw_BMP
        PUBLIC F12x12
        PUBLIC F12x12_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC OLED_CLS
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P12x12Str
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P6x8Str1
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_Print1
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC OLED_WrDat1
        PUBLIC OLED_write_myfloat
        PUBLIC OLED_write_myfloat1
        PUBLIC OLED_writenum_3
        PUBLIC OLED_writenum_31
        PUBLIC OLED_writenum_4
        PUBLIC get


        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 "000"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_1:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_2:
        DATA
        DC8 "000"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_3:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_4:
        DATA
        DC8 "0000"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_5:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_6:
        DATA
        DC8 "0000000"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_7:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_8:
        DATA
        DC8 "0000000"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_9:
        DATA
        DC8 "0123456789"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_10:
        DATA
        DC8 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 0
// G:\GitHub\newK60_github\Project\k60 -1chen2mianqiangWin\project\hz\app\OLED.c
//    1 #include "head.h"
//    2 /********************************************
//    3 使用说明：
//    4 OLED电源使用3.3V时   
//    5 ----------------
//    6   G    电源地
//    7   3.3V 接3.3V电源
//    8   D0   PTB2  
//    9   D1   PTB4
//   10   RST  PTB6
//   11   DC   PTB8
//   12   CS   已接地，不用接
//   13 ----------------
//   14 *********************************************/
//   15 
//   16 #define XLevelL		0x00
//   17 #define XLevelH		0x10
//   18 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   19 #define Max_Column	128
//   20 #define Max_Row		  64
//   21 #define	Brightness	0xCF 
//   22 /*
//   23 4线SPI使用说明：
//   24 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   25 VCC 供内部逻辑电压 1.8~6V   
//   26 GND 地
//   27 
//   28 BS0 低电平
//   29 BS1 低电平
//   30 BS2 低电平
//   31 
//   32 CS  片选管脚
//   33 DC  命令数据选择管脚
//   34 RES 模块复位管脚 
//   35 D0（SCLK） ，时钟脚，由MCU控制
//   36 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   37 
//   38 D2 悬空      
//   39 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   40 RD  低电平 ，也可悬空，但最好设为低电平
//   41 RW  低电平 ，也可悬空，但最好设为低电平
//   42 RD  低电平 ，也可悬空，但最好设为低电平   
//   43 */
//   44 
//   45 
//   46 
//   47 #define X_WIDTH 128
//   48 #define Y_WIDTH 64
//   49 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   50 const byte F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   51 {
//   52     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   53     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   54     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   55     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   56     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   57     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   58     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   59     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   60     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   61     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   62     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   63     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   64     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   65     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   66     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   67     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   68     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   69     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   70     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   71     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   72     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   73     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   74     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   75     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   76     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   77     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   78     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   79     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   80     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   81     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   82     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   83     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   84     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   85     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   86     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   87     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   88     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   89     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   90     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   91     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   92     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   93     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   94     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   95     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   96     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   97     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   98     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//   99     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  100     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  101     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  102     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  103     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  104     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  105     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  106     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  107     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  108     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  109     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  110     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  111     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  112     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  113     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  114     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  115     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  116     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  117     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  118     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  119     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  120     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  121     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  122     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  123     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  124     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  125     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  126     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  127     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  128     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  129     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  130     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  131     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  132     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  133     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  134     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  135     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  136     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  137     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  138     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  139     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  140     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  141     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  142     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  143     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  144 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  145 const byte F12x12_Idx[] = 
F12x12_Idx:
        DATA
        DC8 "\312\322\316\302\266\310\260\264\274\374\264\316\265\347\321\271\324\264\326\265"
        DC8 0, 0, 0
//  146 {
//  147 	"室温度按键次电压源值"
//  148 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  149 const byte F12x12[] = {  
F12x12:
        DATA
        DC8 28, 4, 148, 212, 181, 150, 148, 212, 148, 4, 28, 0, 8, 10, 10, 10
        DC8 10, 15, 10, 10, 10, 10, 8, 0, 34, 68, 0, 192, 95, 213, 85, 213, 95
        DC8 192, 0, 0, 4, 2, 9, 15, 8, 15, 8, 15, 8, 15, 8, 0, 0, 254, 10, 138
        DC8 190, 170, 171, 170, 190, 138, 10, 0, 8, 7, 0, 8, 9, 10, 4, 4, 10, 9
        DC8 8, 0, 136, 136, 255, 72, 0, 76, 196, 117, 70, 196, 76, 0, 0, 8, 15
        DC8 0, 8, 8, 5, 2, 2, 5, 8, 0, 148, 243, 146, 100, 220, 136, 170, 255
        DC8 170, 190, 8, 0, 0, 15, 4, 10, 7, 10, 10, 15, 10, 10, 10, 0, 2, 4
        DC8 128, 32, 24, 135, 116, 132, 4, 20, 12, 0, 2, 1, 8, 4, 2, 1, 0, 1, 2
        DC8 4, 8, 0, 252, 36, 36, 36, 255, 36, 36, 36, 252, 0, 0, 0, 3, 1, 1, 1
        DC8 7, 9, 9, 9, 9, 8, 14, 0, 0, 254, 2, 66, 66, 66, 250, 66, 66, 66, 2
        DC8 0, 8, 7, 8, 8, 8, 8, 15, 8, 9, 10, 8, 0, 17, 34, 0, 255, 1, 249
        DC8 173, 171, 169, 249, 1, 0, 4, 2, 8, 7, 4, 2, 8, 15, 0, 2, 4, 0, 16
        DC8 252, 3, 0, 250, 170, 175, 170, 170, 250, 2, 0, 0, 15, 0, 8, 15, 10
        DC8 10, 10, 10, 15, 8, 0
//  150 0x1C,0x04,0x94,0xD4,0xB5,0x96,0x94,0xD4,0x94,0x04,0x1C,0x00,
//  151 0x08,0x0A,0x0A,0x0A,0x0A,0x0F,0x0A,0x0A,0x0A,0x0A,0x08,0x00,//室
//  152 
//  153 0x22,0x44,0x00,0xC0,0x5F,0xD5,0x55,0xD5,0x5F,0xC0,0x00,0x00,
//  154 0x04,0x02,0x09,0x0F,0x08,0x0F,0x08,0x0F,0x08,0x0F,0x08,0x00,//温
//  155 
//  156 0x00,0xFE,0x0A,0x8A,0xBE,0xAA,0xAB,0xAA,0xBE,0x8A,0x0A,0x00,
//  157 0x08,0x07,0x00,0x08,0x09,0x0A,0x04,0x04,0x0A,0x09,0x08,0x00,//度
//  158 
//  159 0x88,0x88,0xFF,0x48,0x00,0x4C,0xC4,0x75,0x46,0xC4,0x4C,0x00,
//  160 0x00,0x08,0x0F,0x00,0x08,0x08,0x05,0x02,0x02,0x05,0x08,0x00,//按
//  161 
//  162 0x94,0xF3,0x92,0x64,0xDC,0x88,0xAA,0xFF,0xAA,0xBE,0x08,0x00,
//  163 0x00,0x0F,0x04,0x0A,0x07,0x0A,0x0A,0x0F,0x0A,0x0A,0x0A,0x00,//键
//  164 
//  165 0x02,0x04,0x80,0x20,0x18,0x87,0x74,0x84,0x04,0x14,0x0C,0x00,
//  166 0x02,0x01,0x08,0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x08,0x00,//次
//  167 
//  168 0xFC,0x24,0x24,0x24,0xFF,0x24,0x24,0x24,0xFC,0x00,0x00,0x00,
//  169 0x03,0x01,0x01,0x01,0x07,0x09,0x09,0x09,0x09,0x08,0x0E,0x00,//电
//  170 
//  171 0x00,0xFE,0x02,0x42,0x42,0x42,0xFA,0x42,0x42,0x42,0x02,0x00,
//  172 0x08,0x07,0x08,0x08,0x08,0x08,0x0F,0x08,0x09,0x0A,0x08,0x00,//压
//  173 
//  174 0x11,0x22,0x00,0xFF,0x01,0xF9,0xAD,0xAB,0xA9,0xF9,0x01,0x00,
//  175 0x04,0x02,0x08,0x07,0x04,0x02,0x08,0x0F,0x00,0x02,0x04,0x00,//源
//  176 
//  177 0x10,0xFC,0x03,0x00,0xFA,0xAA,0xAF,0xAA,0xAA,0xFA,0x02,0x00,
//  178 0x00,0x0F,0x00,0x08,0x0F,0x0A,0x0A,0x0A,0x0A,0x0F,0x08,0x00,//值
//  179 
//  180 };
//  181 
//  182 //======================================================
//  183 // 128X64I液晶底层驱动[8X16]字体库
//  184 // 设计者: powerint
//  185 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  186 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  187 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  188 const byte F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  189 {
//  190 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  191   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  192   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  193   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  194   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  195   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  196   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  197   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  198   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  199   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  200   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  201   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  202   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  203   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  204   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  205   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  206   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  207   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  208   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  209   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  210   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  211   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  212   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  213   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  214   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  215   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  216   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  217   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  218   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  219   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  220   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  221   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  222   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  223   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  224   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  225   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  226   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  227   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  228   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  229   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  230   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  231   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  232   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  233   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  234   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  235   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  236   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  237   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  238   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  239   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  240   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  241   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  242   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  243   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  244   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  245   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  246   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  247   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  248   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  249   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  250   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  251   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  252   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  253   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  254   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  255   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  256   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  257   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  258   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  259   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  260   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  261   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  262   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  263   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  264   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  265   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  266   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  267   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  268   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  269   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  270   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  271   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  272   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  273   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  274   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  275   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  276   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  277   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  278   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  279   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  280   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  281   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  282   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  283   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  284   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  285 
//  286 };
//  287 //数据水平，字节垂直

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  288 void OLED_WrDat(byte data)
//  289 {
//  290   byte i=8;
OLED_WrDat:
        MOVS     R1,#+8
//  291   //LCD_CS=0;;
//  292   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x800000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  293   asm("nop"); 
        nop
//  294   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  295   asm("nop");    
        nop
        B.N      ??OLED_WrDat_0
//  296   while(i--)
//  297   {
//  298     if(data&0x80){GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
//  299     else{GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
??OLED_WrDat_1:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  300     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0)); 
??OLED_WrDat_2:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  301     asm("nop");;;;
        nop
//  302     //asm("nop");            
//  303     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  304     data<<=1;    
        LSLS     R0,R0,#+1
??OLED_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrDat_1
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat_2
//  305   }
//  306   //LCD_CS=1;
//  307 }
??OLED_WrDat_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  308 void OLED_WrCmd(byte cmd)
//  309 {
//  310   byte i=8;
OLED_WrCmd:
        MOVS     R1,#+8
//  311   //LCD_CS=0;;
//  312   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x800000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  313   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_0
//  314   //asm("nop");   
//  315   while(i--)
//  316   {
//  317     if(cmd&0x80){GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;;}
//  318     else{GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;;;}
??OLED_WrCmd_1:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  319     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;
??OLED_WrCmd_2:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  320     asm("nop");;;;
        nop
//  321     //asm("nop");             
//  322     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  323     cmd<<=1;;;;;   
        LSLS     R0,R0,#+1
??OLED_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrCmd_1
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_2
//  324   } 	
//  325   //LCD_CS=1;
//  326 }
??OLED_WrCmd_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  327 void OLED_Set_Pos(byte x, byte y)
//  328 { 
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  329   OLED_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  330   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  331   OLED_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  332 } 
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  333 void OLED_Fill(byte bmp_data)
//  334 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  335   byte y,x;
//  336   for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??OLED_Fill_0
//  337   {
//  338     OLED_WrCmd(0xb0+y);
//  339     OLED_WrCmd(0x01);
//  340     OLED_WrCmd(0x10);
//  341     for(x=0;x<X_WIDTH;x++)
//  342       OLED_WrDat(bmp_data);
??OLED_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??OLED_Fill_1
        ADDS     R5,R5,#+1
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R6,#+0
        B.N      ??OLED_Fill_2
//  343   }
//  344 }
??OLED_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  345 void OLED_CLS(void)
//  346 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  347   byte y,x;	
//  348   for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??OLED_CLS_0
//  349   {
//  350     OLED_WrCmd(0xb0+y);
//  351     OLED_WrCmd(0x01);
//  352     OLED_WrCmd(0x10); 
//  353     for(x=0;x<X_WIDTH;x++)
//  354       OLED_WrDat(0);
??OLED_CLS_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??OLED_CLS_1
        ADDS     R4,R4,#+1
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B.N      ??OLED_CLS_2
//  355   }
//  356 }
??OLED_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  357 void OLED_DLY_ms(word ms)
//  358 {                         
OLED_DLY_ms:
        B.N      ??OLED_DLY_ms_0
//  359   word a;
//  360   while(ms)
//  361   {
//  362     a=13350;
??OLED_DLY_ms_1:
        MOVW     R1,#+13350
//  363     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  364     ms--;
        SUBS     R0,R0,#+1
//  365   }
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??OLED_DLY_ms_1
//  366   return;
        BX       LR               ;; return
//  367 }
//  368 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  369 void OLED_Init(void)        
//  370 {
OLED_Init:
        PUSH     {R7,LR}
//  371   //设置PORTA pin14,pin15为GPIO口 
//  372   PORT_PCR_REG(OLED_PPORT,OLED0)=(0|PORT_PCR_MUX(1));
        MOV      R0,#+256
        LDR.W    R1,??DataTable13_1  ;; 0x4004a050
        STR      R0,[R1, #+0]
//  373   PORT_PCR_REG(OLED_PPORT,OLED1)=(0|PORT_PCR_MUX(1)); 
        MOV      R0,#+256
        LDR.W    R1,??DataTable13_2  ;; 0x4004a054
        STR      R0,[R1, #+0]
//  374   PORT_PCR_REG(OLED_PPORT,OLED2)=(0|PORT_PCR_MUX(1));
        MOV      R0,#+256
        LDR.W    R1,??DataTable13_3  ;; 0x4004a058
        STR      R0,[R1, #+0]
//  375   PORT_PCR_REG(OLED_PPORT,OLED3)=(0|PORT_PCR_MUX(1)); 
        MOV      R0,#+256
        LDR.W    R1,??DataTable13_4  ;; 0x4004a05c
        STR      R0,[R1, #+0]
//  376   //设置PORTA pin14,pin15,pin16,pin17为输出方向
//  377   GPIO_PDDR_REG(OLED_GPORT)=GPIO_PDDR_PDD(GPIO_PIN(OLED0)|GPIO_PIN(OLED1)|GPIO_PIN(OLED2)|GPIO_PIN(OLED3));
        MOVS     R0,#+15728640
        LDR.W    R1,??DataTable13_5  ;; 0x400ff054
        STR      R0,[R1, #+0]
//  378   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0));
        LDR.W    R0,??DataTable13  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x100000
        LDR.W    R1,??DataTable13  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  379   //LCD_CS=1;	//预制SLK和SS为高电平   		
//  380   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED2));
        LDR.W    R0,??DataTable13  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        BICS     R0,R0,#0x400000
        LDR.W    R1,??DataTable13  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  381   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  382   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED2));
        LDR.W    R0,??DataTable13  ;; 0x400ff040
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x400000
        LDR.W    R1,??DataTable13  ;; 0x400ff040
        STR      R0,[R1, #+0]
//  383   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  384   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  385   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  386   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  387   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  388   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  389   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  390   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  391   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  392   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  393   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  394   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  395   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  396   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  397   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  398   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  399   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  400   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  401   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  402   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  403   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  404   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  405   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  406   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  407   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  408   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  409   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  410   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  411   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  412   OLED_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  413   OLED_Fill(0xff);//黑屏 
        MOVS     R0,#+255
        BL       OLED_Fill
//  414   OLED_DLY_ms(1000); 
        MOV      R0,#+1000
        BL       OLED_DLY_ms
//  415   OLED_Fill(0x00);//亮屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  416   OLED_DLY_ms(1000);     
        MOV      R0,#+1000
        BL       OLED_DLY_ms
//  417 } 
        POP      {R0,PC}          ;; return
//  418 //==============================================================
//  419 //函数名： void LCD_PutPixel(byte x,byte y)
//  420 //功能描述：绘制一个点（x,y）
//  421 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  422 //返回：无
//  423 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  424 void OLED_PutPixel(byte x,byte y)
//  425 {
OLED_PutPixel:
        PUSH     {R4,LR}
//  426   byte data1;  //data1当前点的数据 
//  427   data1 = 0x01<<(y%8); 	
        MOVS     R2,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R3,#+8
        SDIV     R4,R1,R3
        MLS      R4,R4,R3,R1
        LSLS     R4,R2,R4
//  428   OLED_Set_Pos(x,(y>>3)); 
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSRS     R1,R1,#+3
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  429   OLED_WrDat(data1);  	 	
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  430 }
        POP      {R4,PC}          ;; return
//  431 //==============================================================
//  432 //函数名： void LCD_Rectangle(byte x1,byte y1,
//  433 //                   byte x2,byte y2,byte color,byte gif)
//  434 //功能描述：绘制一个实心矩形
//  435 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  436 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  437 //返回：无
//  438 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  439 void OLED_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
//  440 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
//  441   byte n; 	
//  442   OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  443   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??OLED_Rectangle_0
//  444   {
//  445     OLED_WrDat(0x01<<(y1%8)); 			
??OLED_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  446     if(gif == 1) 	OLED_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  447   }  
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_1
//  448   OLED_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  449   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??OLED_Rectangle_3
//  450   {
//  451     OLED_WrDat(0x01<<(y2%8)); 			
??OLED_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  452     if(gif == 1) 	OLED_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
        MOVS     R0,#+5
        BL       OLED_DLY_ms
//  453   }
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_4
//  454 }  
        POP      {R0,R4-R9,PC}    ;; return
//  455 //==============================================================
//  456 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
//  457 //功能描述：写入一组标准ASCII字符串
//  458 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  459 //返回：无
//  460 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  461 void OLED_P6x8Str(byte x,byte y,byte ch[])
//  462 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  463   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str_0
//  464   while (ch[j]!='\0')
//  465   {    
//  466     c =ch[j]-32;
//  467     if(x>126){x=0;y++;}
//  468     OLED_Set_Pos(x,y);    
//  469     for(i=0;i<6;i++)     
//  470       OLED_WrDat(F6x8[c][i]);  
??OLED_P6x8Str_1:
        LDR.W    R0,??DataTable13_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str_1
//  471     x+=6;
        ADDS     R4,R4,#+6
//  472     j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str_2
//  473   }
//  474 }
??OLED_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  475 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  476 void OLED_WrDat1(byte data)
//  477 {
//  478   byte i=8;
OLED_WrDat1:
        MOVS     R1,#+8
//  479   //LCD_CS=0;;
//  480   GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED3));;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x800000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  481   asm("nop"); 
        nop
//  482   GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  483   asm("nop");    
        nop
        B.N      ??OLED_WrDat1_0
//  484   while(i--)
//  485   {
//  486     if(data&0x80){GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
//  487     else{GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED1));;;;}
??OLED_WrDat1_1:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  488     GPIO_PDOR_REG(OLED_GPORT) |=  GPIO_PDOR_PDO(GPIO_PIN(OLED0)); 
??OLED_WrDat1_2:
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  489     asm("nop");;;;
        nop
//  490     //asm("nop");            
//  491     GPIO_PDOR_REG(OLED_GPORT) &= ~GPIO_PDOR_PDO(GPIO_PIN(OLED0));;;;;    
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x100000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
//  492     data<<=1;    
        LSLS     R0,R0,#+1
??OLED_WrDat1_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrDat1_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrDat1_1
        LDR.W    R2,??DataTable13  ;; 0x400ff040
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x200000
        LDR.W    R3,??DataTable13  ;; 0x400ff040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat1_2
//  493   }
//  494   //LCD_CS=1;
//  495 }
??OLED_WrDat1_3:
        BX       LR               ;; return
//  496 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  497 void OLED_P6x8Str1(byte x,byte y,byte ch[])
//  498 {
OLED_P6x8Str1:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  499   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str1_0
//  500   while (ch[j]!='\0')
//  501   {    
//  502     c =ch[j]-32;
//  503     if(x>126){x=0;y++;}
//  504     OLED_Set_Pos(x,y);    
//  505     for(i=0;i<6;i++)     
//  506       OLED_WrDat1(F6x8[c][i]);  
??OLED_P6x8Str1_1:
        LDR.W    R0,??DataTable13_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat1
        ADDS     R8,R8,#+1
??OLED_P6x8Str1_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str1_1
//  507     x+=6;
        ADDS     R4,R4,#+6
//  508     j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str1_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str1_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str1_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str1_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str1_2
//  509   }
//  510 }
??OLED_P6x8Str1_3:
        POP      {R0,R4-R9,PC}    ;; return
//  511 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  512 void OLED_Print1(byte x, byte y, byte ch[])
//  513 {
OLED_Print1:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  514 	byte ch2[3];
//  515 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??OLED_Print1_0
//  516 	while(ch[ii] != '\0')
//  517 	{
//  518 		if(ch[ii] > 127)
//  519 		{
//  520 			ch2[0] = ch[ii];
??OLED_Print1_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  521 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  522 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  523 			OLED_P12x12Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P12x12Str
//  524 			x += 12;
        ADDS     R4,R4,#+12
//  525 			ii += 2;
        ADDS     R7,R7,#+2
//  526 		}
??OLED_Print1_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print1_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print1_1
//  527 		else
//  528 		{
//  529 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  530 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  531 			OLED_P6x8Str1(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str1
//  532 			x += 6;
        ADDS     R4,R4,#+6
//  533 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print1_0
//  534 		}
//  535 	}
//  536 } 
??OLED_Print1_2:
        POP      {R0,R4-R7,PC}    ;; return
//  537 
//  538 
//  539 
//  540 //==============================================================
//  541 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
//  542 //功能描述：写入一组标准ASCII字符串
//  543 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  544 //返回：无
//  545 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  546 void OLED_P8x16Str(byte x,byte y,byte ch[])
//  547 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  548   byte c=0,i=0,j=0;     
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P8x16Str_0
//  549   while (ch[j]!='\0')
//  550   {    
//  551     c =ch[j]-32;
//  552     if(x>120){x=0;y++;}
//  553     OLED_Set_Pos(x,y);    
//  554     for(i=0;i<8;i++)     
//  555       OLED_WrDat(F8X16[c*16+i]);
//  556     OLED_Set_Pos(x,y+1);    
//  557     for(i=0;i<8;i++)     
//  558       OLED_WrDat(F8X16[c*16+i+8]);  
??OLED_P8x16Str_1:
        LDR.W    R0,??DataTable13_7
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_1
//  559   x+=8;
        ADDS     R4,R4,#+8
//  560   j++;
        ADDS     R9,R9,#+1
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_5
??OLED_P8x16Str_6:
        LDR.W    R0,??DataTable13_7
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_2
//  561   }
//  562 }
??OLED_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  563 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  564 void OLED_P12x12Str(byte x,byte y,byte ch[])
//  565 {
OLED_P12x12Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
//  566 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
//  567 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??OLED_P12x12Str_0
//  568 	
//  569 	while(ch[ii] != '\0')
//  570 	{
//  571   	wm = 0;
//  572   	adder = 1;
//  573   	while(F12x12_Idx[wm] > 127)
//  574   	{
//  575   		if(F12x12_Idx[wm] == ch[ii])
//  576   		{
//  577   			if(F12x12_Idx[wm + 1] == ch[ii + 1])
//  578   			{
//  579   				adder = wm * 12;
//  580   				break;
//  581   			}
//  582   		}
//  583   		wm += 2;			
//  584   	}
//  585   	if(x>118){x=0;y++;}
//  586   	OLED_Set_Pos(x , y); 
//  587   	if(adder != 1)// 显示汉字					
//  588   	{
//  589   		OLED_Set_Pos(x , y);
//  590   		for(wm = 0;wm < 12;wm++)               
//  591   		{
//  592   			OLED_WrDat(F12x12[adder]);	
//  593   			adder += 1;
//  594   		}      
//  595   		OLED_Set_Pos(x,y + 1); 
//  596   		for(wm = 0;wm < 12;wm++)          
//  597   		{
//  598   			OLED_WrDat(F12x12[adder]);
//  599   			adder += 1;
//  600   		}   		
//  601   	}
//  602   	else			  //显示空白字符			
//  603   	{
//  604   		ii += 1;
//  605       OLED_Set_Pos(x,y);
//  606   		for(wm = 0;wm < 12;wm++)
//  607   		{
//  608   				OLED_WrDat(0);
//  609   		}
//  610   		OLED_Set_Pos(x,y + 1);
//  611   		for(wm = 0;wm < 12;wm++)
//  612   		{   		
//  613   				OLED_WrDat(0);	
??OLED_P12x12Str_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
//  614   		}
        ADDS     R9,R9,#+1
??OLED_P12x12Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_1
//  615   	}
//  616   	x += 12;
??OLED_P12x12Str_3:
        ADDS     R6,R6,#+12
//  617   	ii += 2;
        ADDS     R7,R7,#+2
??OLED_P12x12Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??OLED_P12x12Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??OLED_P12x12Str_5
??OLED_P12x12Str_6:
        ADDS     R9,R9,#+2
??OLED_P12x12Str_5:
        LDR.W    R0,??DataTable13_8
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P12x12Str_7
        LDR.W    R0,??DataTable13_8
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??OLED_P12x12Str_6
        LDR.W    R0,??DataTable13_8
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P12x12Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+12
        SMULBB   R8,R9,R0
??OLED_P12x12Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??OLED_P12x12Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??OLED_P12x12Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+1
        BEQ.N    ??OLED_P12x12Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_10
??OLED_P12x12Str_11:
        LDR.W    R0,??DataTable13_9
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??OLED_P12x12Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
??OLED_P12x12Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BGE.N    ??OLED_P12x12Str_3
        LDR.W    R0,??DataTable13_9
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??OLED_P12x12Str_12
??OLED_P12x12Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_13
??OLED_P12x12Str_14:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
??OLED_P12x12Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+12
        BLT.N    ??OLED_P12x12Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P12x12Str_2
//  618 	}
//  619 }
??OLED_P12x12Str_4:
        POP      {R0,R4-R9,PC}    ;; return
//  620 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  621 void OLED_Print(byte x, byte y, byte ch[])
//  622 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  623 	byte ch2[3];
//  624 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??OLED_Print_0
//  625 	while(ch[ii] != '\0')
//  626 	{
//  627 		if(ch[ii] > 127)
//  628 		{
//  629 			ch2[0] = ch[ii];
??OLED_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  630 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  631 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  632 			OLED_P12x12Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P12x12Str
//  633 			x += 12;
        ADDS     R4,R4,#+12
//  634 			ii += 2;
        ADDS     R7,R7,#+2
//  635 		}
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print_1
//  636 		else
//  637 		{
//  638 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  639 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  640 			OLED_P6x8Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  641 			x += 6;
        ADDS     R4,R4,#+6
//  642 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  643 		}
//  644 	}
//  645 } 
??OLED_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
//  646 
//  647 
//  648 
//  649 
//  650 //==============================================================
//  651 //函数名： void Draw_BMP(byte x,byte y)
//  652 //功能描述：显示BMP图片128×64
//  653 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
//  654 //返回：无
//  655 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  656 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
//  657 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
//  658   word ii=0;
        MOVS     R7,#+0
//  659   byte x,y;
//  660   
//  661   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
//  662   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
//  663 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
//  664 	{
//  665 		OLED_Set_Pos(x0,y);				
//  666     for(x=x0;x<x1;x++)
//  667 	    {      
//  668 	    	OLED_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRB     R0,[R7, R8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
//  669 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
//  670 	}
//  671 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
//  672 //==============================================================
//  673 //函数名： void LCD_write6x8_num(byte x,byte y,int data_num)
//  674 //功能描述：显示三位数字
//  675 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7，要显示的数字data_num
//  676 //返回：无
//  677 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  678  void OLED_writenum_3(byte x,byte y,int data_num) 
//  679  {
OLED_writenum_3:
        PUSH     {R0-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  680     int bai,shi,ge;
//  681     byte data_num1[4]="000";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable13_10
        LDR      R2,[R1, #0]
        STR      R2,[R0, #+0]
//  682     byte data_num2[]="0123456789";
        ADD      R0,SP,#+4
        LDR.W    R1,??DataTable13_11
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  683 
//  684     bai=data_num%1000/100;
        MOV      R0,#+1000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+100
        SDIV     R0,R0,R1
//  685     shi=data_num%100/10;
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R1,R1,R2
//  686     ge =data_num%10;
        MOVS     R2,#+10
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
//  687 
//  688     data_num1[0]=data_num2[bai];
        ADD      R3,SP,#+4
        LDRB     R0,[R0, R3]
        STRB     R0,[SP, #+0]
//  689     data_num1[1]=data_num2[shi];
        ADD      R0,SP,#+4
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  690     data_num1[2]=data_num2[ge];
        ADD      R0,SP,#+4
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  691     
//  692     OLED_Print(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Print
//  693  }
        POP      {R0-R6,PC}       ;; return
//  694 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  695 void OLED_writenum_31(byte x,byte y,int data_num) 
//  696  {
OLED_writenum_31:
        PUSH     {R0-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  697     int bai,shi,ge;
//  698     byte data_num1[4]="000";
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable13_12
        LDR      R2,[R1, #0]
        STR      R2,[R0, #+0]
//  699     byte data_num2[]="0123456789";
        ADD      R0,SP,#+4
        LDR.N    R1,??DataTable13_13
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  700 
//  701     bai=data_num%1000/100;
        MOV      R0,#+1000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+100
        SDIV     R0,R0,R1
//  702     shi=data_num%100/10;
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R1,R1,R2
//  703     ge =data_num%10;
        MOVS     R2,#+10
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
//  704 
//  705     data_num1[0]=data_num2[bai];
        ADD      R3,SP,#+4
        LDRB     R0,[R0, R3]
        STRB     R0,[SP, #+0]
//  706     data_num1[1]=data_num2[shi];
        ADD      R0,SP,#+4
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  707     data_num1[2]=data_num2[ge];
        ADD      R0,SP,#+4
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  708     
//  709     OLED_Print1(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Print1
//  710  }
        POP      {R0-R6,PC}       ;; return
//  711 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  712 void OLED_writenum_4(byte x,byte y,int data_num) 
//  713  {
OLED_writenum_4:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  714     int qian,bai,shi,ge;
//  715     byte data_num1[5]="0000";
        ADD      R0,SP,#+0
        LDR.N    R1,??DataTable13_14
        MOVS     R2,#+5
        BL       __aeabi_memcpy
//  716     byte data_num2[]="0123456789";
        ADD      R0,SP,#+8
        LDR.N    R1,??DataTable13_15
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  717 
//  718     qian=data_num%10000/1000;
        MOVW     R0,#+10000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOV      R1,#+1000
        SDIV     R0,R0,R1
//  719     bai=data_num%1000/100;
        MOV      R1,#+1000
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+100
        SDIV     R1,R1,R2
//  720     shi=data_num%100/10;
        MOVS     R2,#+100
        SDIV     R3,R6,R2
        MLS      R2,R2,R3,R6
        MOVS     R3,#+10
        SDIV     R2,R2,R3
//  721     ge =data_num%10;
        MOVS     R3,#+10
        SDIV     R7,R6,R3
        MLS      R3,R3,R7,R6
//  722   
//  723     data_num1[0]=data_num2[qian];
        ADD      R6,SP,#+8
        LDRB     R0,[R0, R6]
        STRB     R0,[SP, #+0]
//  724     data_num1[1]=data_num2[bai];
        ADD      R0,SP,#+8
        LDRB     R0,[R1, R0]
        STRB     R0,[SP, #+1]
//  725     data_num1[2]=data_num2[shi];
        ADD      R0,SP,#+8
        LDRB     R0,[R2, R0]
        STRB     R0,[SP, #+2]
//  726     data_num1[3]=data_num2[ge];
        ADD      R0,SP,#+8
        LDRB     R0,[R3, R0]
        STRB     R0,[SP, #+3]
//  727 
//  728     
//  729     OLED_Print(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Print
//  730  }
        ADD      SP,SP,#+20
        POP      {R4-R7,PC}       ;; return
//  731 
//  732 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  733 void OLED_write_myfloat(byte x,byte y,uint32 data)
//  734 {
OLED_write_myfloat:
        PUSH     {R4-R6,LR}
        SUB      SP,SP,#+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  735     byte data_num1[8]="0000000";
        ADD      R0,SP,#+0
        LDR.N    R1,??DataTable13_16
        LDM      R1!,{R2,R3}
        STM      R0!,{R2,R3}
        SUBS     R1,R1,#+8
        SUBS     R0,R0,#+8
//  736     byte data_num2[]="0123456789";
        ADD      R0,SP,#+8
        LDR.N    R1,??DataTable13_17
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  737 
//  738 
//  739   
//  740     data_num1[6]=data_num2[data%10];
        MOVS     R0,#+10
        UDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+6]
//  741     data_num1[5]=data_num2[data/10%10];
        MOVS     R0,#+10
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+5]
//  742     data_num1[4]=data_num2[data/100%10];
        MOVS     R0,#+100
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+4]
//  743     data_num1[3]='.';
        MOVS     R0,#+46
        STRB     R0,[SP, #+3]
//  744     data_num1[2]=data_num2[data/1000%10];
        MOV      R0,#+1000
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+2]
//  745     data_num1[1]=data_num2[data/10000%10];
        MOVW     R0,#+10000
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+1]
//  746     data_num1[0]=data_num2[data/100000%10];
        LDR.N    R0,??DataTable13_18  ;; 0x186a0
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+0]
//  747     OLED_Print(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Print
//  748 }
        ADD      SP,SP,#+24
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  749 void OLED_write_myfloat1(byte x,byte y,uint32 data)
//  750 {
OLED_write_myfloat1:
        PUSH     {R4-R6,LR}
        SUB      SP,SP,#+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  751     byte data_num1[8]="0000000";
        ADD      R0,SP,#+0
        LDR.N    R1,??DataTable13_19
        LDM      R1!,{R2,R3}
        STM      R0!,{R2,R3}
        SUBS     R1,R1,#+8
        SUBS     R0,R0,#+8
//  752     byte data_num2[]="0123456789";
        ADD      R0,SP,#+8
        LDR.N    R1,??DataTable13_20
        MOVS     R2,#+11
        BL       __aeabi_memcpy
//  753 
//  754 
//  755   
//  756     data_num1[6]=data_num2[data%10];
        MOVS     R0,#+10
        UDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+6]
//  757     data_num1[5]=data_num2[data/10%10];
        MOVS     R0,#+10
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+5]
//  758     data_num1[4]=data_num2[data/100%10];
        MOVS     R0,#+100
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+4]
//  759     data_num1[3]='.';
        MOVS     R0,#+46
        STRB     R0,[SP, #+3]
//  760     data_num1[2]=data_num2[data/1000%10];
        MOV      R0,#+1000
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+2]
//  761     data_num1[1]=data_num2[data/10000%10];
        MOVW     R0,#+10000
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+1]
//  762     data_num1[0]=data_num2[data/100000%10];
        LDR.N    R0,??DataTable13_18  ;; 0x186a0
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADD      R1,SP,#+8
        LDRB     R0,[R0, R1]
        STRB     R0,[SP, #+0]
//  763     OLED_Print1(x,y,data_num1);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Print1
//  764 }
        ADD      SP,SP,#+24
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  765 void get(int x,int y,int z,int z1,int p) 
//  766 {
get:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+36
//  767    byte s[10]={'0','1','2','3','4','5','6','7','8','9'};
        ADD      R4,SP,#+0
        LDR.N    R5,??DataTable13_21
        LDM      R5!,{R6,R7,R12}
        STM      R4!,{R6,R7,R12}
        SUBS     R5,R5,#+12
        SUBS     R4,R4,#+12
//  768    int k=20;
        MOVS     R4,#+20
//  769    byte ch[21];
//  770    ch[k--]='\0'; 
        MOVS     R5,#+0
        ADD      R6,SP,#+12
        STRB     R5,[R4, R6]
        SUBS     R4,R4,#+1
//  771    if(z1==0)
        CMP      R3,#+0
        BNE.N    ??get_0
//  772    {
//  773     ch[k--]=s[0];
        LDRB     R3,[SP, #+0]
        ADD      R5,SP,#+12
        STRB     R3,[R4, R5]
        SUBS     R4,R4,#+1
        B.N      ??get_1
//  774    } 
//  775    else
//  776   {
//  777    while(z1>0)
//  778    {
//  779     ch[k--]=s[z1%10];
??get_2:
        MOVS     R5,#+10
        SDIV     R6,R3,R5
        MLS      R5,R5,R6,R3
        ADD      R6,SP,#+0
        LDRB     R5,[R5, R6]
        ADD      R6,SP,#+12
        STRB     R5,[R4, R6]
        SUBS     R4,R4,#+1
//  780     z1=z1/10; 
        MOVS     R5,#+10
        SDIV     R3,R3,R5
//  781    }
??get_0:
        CMP      R3,#+1
        BGE.N    ??get_2
//  782   }
//  783 
//  784    ch[k--]=' ';
??get_1:
        MOVS     R3,#+32
        ADD      R5,SP,#+12
        STRB     R3,[R4, R5]
        SUBS     R4,R4,#+1
//  785    if(z==0) 
        CMP      R2,#+0
        BNE.N    ??get_3
//  786    {
//  787     ch[k--]=s[0];
        LDRB     R2,[SP, #+0]
        ADD      R3,SP,#+12
        STRB     R2,[R4, R3]
        SUBS     R4,R4,#+1
        B.N      ??get_4
//  788    } 
//  789    else 
//  790    {
//  791     while(z>0)
//  792     {
//  793      ch[k--]=s[z%10];
??get_5:
        MOVS     R3,#+10
        SDIV     R5,R2,R3
        MLS      R3,R3,R5,R2
        ADD      R5,SP,#+0
        LDRB     R3,[R3, R5]
        ADD      R5,SP,#+12
        STRB     R3,[R4, R5]
        SUBS     R4,R4,#+1
//  794      z=z/10; 
        MOVS     R3,#+10
        SDIV     R2,R2,R3
//  795     }
??get_3:
        CMP      R2,#+1
        BGE.N    ??get_5
//  796    }
//  797    ch[k--]=' ';
??get_4:
        MOVS     R2,#+32
        ADD      R3,SP,#+12
        STRB     R2,[R4, R3]
        SUBS     R4,R4,#+1
//  798    
//  799    if(y==0) 
        CMP      R1,#+0
        BNE.N    ??get_6
//  800    {
//  801      ch[k--]=s[0];
        LDRB     R1,[SP, #+0]
        ADD      R2,SP,#+12
        STRB     R1,[R4, R2]
        SUBS     R4,R4,#+1
        B.N      ??get_7
//  802    } 
//  803    else
//  804    {
//  805     while(y>0)
//  806     {
//  807      ch[k--]=s[y%10];
??get_8:
        MOVS     R2,#+10
        SDIV     R3,R1,R2
        MLS      R2,R2,R3,R1
        ADD      R3,SP,#+0
        LDRB     R2,[R2, R3]
        ADD      R3,SP,#+12
        STRB     R2,[R4, R3]
        SUBS     R4,R4,#+1
//  808      y=y/10; 
        MOVS     R2,#+10
        SDIV     R1,R1,R2
//  809     }
??get_6:
        CMP      R1,#+1
        BGE.N    ??get_8
//  810    }
//  811    ch[k--]=' ';
??get_7:
        MOVS     R1,#+32
        ADD      R2,SP,#+12
        STRB     R1,[R4, R2]
        SUBS     R4,R4,#+1
//  812    
//  813    if(x==0) 
        CMP      R0,#+0
        BNE.N    ??get_9
//  814    {
//  815      ch[k--]=s[0];
        LDRB     R0,[SP, #+0]
        ADD      R1,SP,#+12
        STRB     R0,[R4, R1]
        SUBS     R4,R4,#+1
        B.N      ??get_10
//  816    } 
//  817    else 
//  818    {
//  819     
//  820     while(x>0)
//  821     {
//  822      ch[k--]=s[x%10];
??get_11:
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R1,R1,R2,R0
        ADD      R2,SP,#+0
        LDRB     R1,[R1, R2]
        ADD      R2,SP,#+12
        STRB     R1,[R4, R2]
        SUBS     R4,R4,#+1
//  823      x=x/10; 
        MOVS     R1,#+10
        SDIV     R0,R0,R1
//  824     }
??get_9:
        CMP      R0,#+1
        BGE.N    ??get_11
//  825    }
//  826    
//  827    while(k>=0) 
??get_10:
        CMP      R4,#+0
        BMI.N    ??get_12
//  828    {
//  829     ch[k]=' ';
        MOVS     R0,#+32
        ADD      R1,SP,#+12
        STRB     R0,[R4, R1]
//  830     k--;
        SUBS     R4,R4,#+1
        B.N      ??get_10
//  831    }
//  832     
//  833    
//  834    OLED_P6x8Str(0,p,ch); 
??get_12:
        ADD      R2,SP,#+12
        LDR      R1,[SP, #+56]
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       OLED_P6x8Str
//  835     
//  836                                                
//  837    
//  838       
//  839 }
        ADD      SP,SP,#+36
        POP      {R4-R7,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13:
        DC32     0x400ff040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_1:
        DC32     0x4004a050

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_2:
        DC32     0x4004a054

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_3:
        DC32     0x4004a058

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_4:
        DC32     0x4004a05c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_5:
        DC32     0x400ff054

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_6:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_7:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_8:
        DC32     F12x12_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_9:
        DC32     F12x12

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_10:
        DC32     ?_0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_11:
        DC32     ?_1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_12:
        DC32     ?_2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_13:
        DC32     ?_3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_14:
        DC32     ?_4

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_15:
        DC32     ?_5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_16:
        DC32     ?_6

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_17:
        DC32     ?_7

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_18:
        DC32     0x186a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_19:
        DC32     ?_8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_20:
        DC32     ?_9

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_21:
        DC32     ?_10

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
// 2 440 bytes in section .rodata
// 3 272 bytes in section .text
// 
// 3 272 bytes of CODE  memory
// 2 440 bytes of CONST memory
//
//Errors: none
//Warnings: none
